
BSc_STM32_BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e94  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004078  08004078  00005078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b8  080040b8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080040b8  080040b8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040b8  080040b8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b8  080040b8  000050b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040bc  080040bc  000050bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  080040cc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080040cc  00006130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a594  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebb  00000000  00000000  000105c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  00012488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000729  00000000  00000000  00012de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b8e  00000000  00000000  00013509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3f1  00000000  00000000  0002d097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097527  00000000  00000000  00039488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d09af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002500  00000000  00000000  000d09f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d2ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004060 	.word	0x08004060

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004060 	.word	0x08004060

08000224 <isPowerOfTwo>:
uint8_t Rx_byte;
uint8_t byte_count = 0;
uint32_t timestamp = 0;
uint32_t interval_timestamp = 0;

bool isPowerOfTwo(int n){
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  return (n > 0) && ((n & (n - 1)) == 0);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	dd07      	ble.n	8000242 <isPowerOfTwo+0x1e>
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1e5a      	subs	r2, r3, #1
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4013      	ands	r3, r2
 800023a:	2b00      	cmp	r3, #0
 800023c:	d101      	bne.n	8000242 <isPowerOfTwo+0x1e>
 800023e:	2301      	movs	r3, #1
 8000240:	e000      	b.n	8000244 <isPowerOfTwo+0x20>
 8000242:	2300      	movs	r3, #0
 8000244:	f003 0301 	and.w	r3, r3, #1
 8000248:	b2db      	uxtb	r3, r3
}
 800024a:	4618      	mov	r0, r3
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr

08000254 <saveBuffer>:
void saveBuffer(){
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
  buffer[0] = ADC_values[0];
 800025a:	4b1a      	ldr	r3, [pc, #104]	@ (80002c4 <saveBuffer+0x70>)
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	b29b      	uxth	r3, r3
 8000260:	b21a      	sxth	r2, r3
 8000262:	4b19      	ldr	r3, [pc, #100]	@ (80002c8 <saveBuffer+0x74>)
 8000264:	801a      	strh	r2, [r3, #0]
  buffer[1] = ADC_values[1];
 8000266:	4b17      	ldr	r3, [pc, #92]	@ (80002c4 <saveBuffer+0x70>)
 8000268:	885b      	ldrh	r3, [r3, #2]
 800026a:	b29b      	uxth	r3, r3
 800026c:	b21a      	sxth	r2, r3
 800026e:	4b16      	ldr	r3, [pc, #88]	@ (80002c8 <saveBuffer+0x74>)
 8000270:	805a      	strh	r2, [r3, #2]
  combinedBuffer[0] = digital_gpio;
 8000272:	4b16      	ldr	r3, [pc, #88]	@ (80002cc <saveBuffer+0x78>)
 8000274:	781a      	ldrb	r2, [r3, #0]
 8000276:	4b16      	ldr	r3, [pc, #88]	@ (80002d0 <saveBuffer+0x7c>)
 8000278:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 4; ++i){
 800027a:	2300      	movs	r3, #0
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	e018      	b.n	80002b2 <saveBuffer+0x5e>
    combinedBuffer[i*2 + 1] = (buffer[i] >> 8) & 0xFF;
 8000280:	4a11      	ldr	r2, [pc, #68]	@ (80002c8 <saveBuffer+0x74>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000288:	121b      	asrs	r3, r3, #8
 800028a:	b21a      	sxth	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	3301      	adds	r3, #1
 8000292:	b2d1      	uxtb	r1, r2
 8000294:	4a0e      	ldr	r2, [pc, #56]	@ (80002d0 <saveBuffer+0x7c>)
 8000296:	54d1      	strb	r1, [r2, r3]
    combinedBuffer[i*2 + 2] = buffer[i] & 0xFF;
 8000298:	4a0b      	ldr	r2, [pc, #44]	@ (80002c8 <saveBuffer+0x74>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	b2d1      	uxtb	r1, r2
 80002a8:	4a09      	ldr	r2, [pc, #36]	@ (80002d0 <saveBuffer+0x7c>)
 80002aa:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < 4; ++i){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b03      	cmp	r3, #3
 80002b6:	dde3      	ble.n	8000280 <saveBuffer+0x2c>

//    combinedBuffer[i+1] = (buffer[i] >> 8) | (buffer[i] << 8);

  }
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	200000f8 	.word	0x200000f8
 80002c8:	200000fc 	.word	0x200000fc
 80002cc:	20000115 	.word	0x20000115
 80002d0:	2000010c 	.word	0x2000010c

080002d4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  if(HAL_GetTick() - timestamp > 10) byte_count = 0;
 80002dc:	f000 fe48 	bl	8000f70 <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	4b9a      	ldr	r3, [pc, #616]	@ (800054c <HAL_UART_RxCpltCallback+0x278>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	1ad3      	subs	r3, r2, r3
 80002e8:	2b0a      	cmp	r3, #10
 80002ea:	d902      	bls.n	80002f2 <HAL_UART_RxCpltCallback+0x1e>
 80002ec:	4b98      	ldr	r3, [pc, #608]	@ (8000550 <HAL_UART_RxCpltCallback+0x27c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]
  timestamp = HAL_GetTick();
 80002f2:	f000 fe3d 	bl	8000f70 <HAL_GetTick>
 80002f6:	4603      	mov	r3, r0
 80002f8:	4a94      	ldr	r2, [pc, #592]	@ (800054c <HAL_UART_RxCpltCallback+0x278>)
 80002fa:	6013      	str	r3, [r2, #0]
  Rx_buffer[byte_count++] = Rx_byte;
 80002fc:	4b94      	ldr	r3, [pc, #592]	@ (8000550 <HAL_UART_RxCpltCallback+0x27c>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	1c5a      	adds	r2, r3, #1
 8000302:	b2d1      	uxtb	r1, r2
 8000304:	4a92      	ldr	r2, [pc, #584]	@ (8000550 <HAL_UART_RxCpltCallback+0x27c>)
 8000306:	7011      	strb	r1, [r2, #0]
 8000308:	461a      	mov	r2, r3
 800030a:	4b92      	ldr	r3, [pc, #584]	@ (8000554 <HAL_UART_RxCpltCallback+0x280>)
 800030c:	7819      	ldrb	r1, [r3, #0]
 800030e:	4b92      	ldr	r3, [pc, #584]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000310:	5499      	strb	r1, [r3, r2]

  switch(byte_count){
 8000312:	4b8f      	ldr	r3, [pc, #572]	@ (8000550 <HAL_UART_RxCpltCallback+0x27c>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	3b03      	subs	r3, #3
 8000318:	2b04      	cmp	r3, #4
 800031a:	f200 815e 	bhi.w	80005da <HAL_UART_RxCpltCallback+0x306>
 800031e:	a201      	add	r2, pc, #4	@ (adr r2, 8000324 <HAL_UART_RxCpltCallback+0x50>)
 8000320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000324:	08000339 	.word	0x08000339
 8000328:	080003b5 	.word	0x080003b5
 800032c:	0800043f 	.word	0x0800043f
 8000330:	08000505 	.word	0x08000505
 8000334:	080005bd 	.word	0x080005bd
    case 3:
      if(Rx_buffer[0] == 0x00 && Rx_buffer[1] == 0x00 && Rx_buffer[2] == 0x00)
 8000338:	4b87      	ldr	r3, [pc, #540]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d10d      	bne.n	800035c <HAL_UART_RxCpltCallback+0x88>
 8000340:	4b85      	ldr	r3, [pc, #532]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000342:	785b      	ldrb	r3, [r3, #1]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d109      	bne.n	800035c <HAL_UART_RxCpltCallback+0x88>
 8000348:	4b83      	ldr	r3, [pc, #524]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800034a:	789b      	ldrb	r3, [r3, #2]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d105      	bne.n	800035c <HAL_UART_RxCpltCallback+0x88>
	HAL_UART_Transmit_IT(&huart3, &digital_gpio, 1);
 8000350:	2201      	movs	r2, #1
 8000352:	4982      	ldr	r1, [pc, #520]	@ (800055c <HAL_UART_RxCpltCallback+0x288>)
 8000354:	4882      	ldr	r0, [pc, #520]	@ (8000560 <HAL_UART_RxCpltCallback+0x28c>)
 8000356:	f003 f8f5 	bl	8003544 <HAL_UART_Transmit_IT>
 800035a:	e02a      	b.n	80003b2 <HAL_UART_RxCpltCallback+0xde>
      else if(Rx_buffer[0] == 0xFF && Rx_buffer[1] == 0x00 && Rx_buffer[2] == 0x00){
 800035c:	4b7e      	ldr	r3, [pc, #504]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2bff      	cmp	r3, #255	@ 0xff
 8000362:	d10f      	bne.n	8000384 <HAL_UART_RxCpltCallback+0xb0>
 8000364:	4b7c      	ldr	r3, [pc, #496]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000366:	785b      	ldrb	r3, [r3, #1]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d10b      	bne.n	8000384 <HAL_UART_RxCpltCallback+0xb0>
 800036c:	4b7a      	ldr	r3, [pc, #488]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800036e:	789b      	ldrb	r3, [r3, #2]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d107      	bne.n	8000384 <HAL_UART_RxCpltCallback+0xb0>
	saveBuffer();
 8000374:	f7ff ff6e 	bl	8000254 <saveBuffer>


	HAL_UART_Transmit_IT(&huart3, (uint8_t *) bufferFlipped, 8);
 8000378:	2208      	movs	r2, #8
 800037a:	497a      	ldr	r1, [pc, #488]	@ (8000564 <HAL_UART_RxCpltCallback+0x290>)
 800037c:	4878      	ldr	r0, [pc, #480]	@ (8000560 <HAL_UART_RxCpltCallback+0x28c>)
 800037e:	f003 f8e1 	bl	8003544 <HAL_UART_Transmit_IT>
 8000382:	e016      	b.n	80003b2 <HAL_UART_RxCpltCallback+0xde>
      }
      else if(Rx_buffer[0] == 0x0F && Rx_buffer[1] == 0x00 && Rx_buffer[2] == 0x00){
 8000384:	4b74      	ldr	r3, [pc, #464]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b0f      	cmp	r3, #15
 800038a:	f040 8128 	bne.w	80005de <HAL_UART_RxCpltCallback+0x30a>
 800038e:	4b72      	ldr	r3, [pc, #456]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000390:	785b      	ldrb	r3, [r3, #1]
 8000392:	2b00      	cmp	r3, #0
 8000394:	f040 8123 	bne.w	80005de <HAL_UART_RxCpltCallback+0x30a>
 8000398:	4b6f      	ldr	r3, [pc, #444]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800039a:	789b      	ldrb	r3, [r3, #2]
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 811e 	bne.w	80005de <HAL_UART_RxCpltCallback+0x30a>


	saveBuffer();
 80003a2:	f7ff ff57 	bl	8000254 <saveBuffer>
	HAL_UART_Transmit_IT(&huart3, combinedBuffer, 9);
 80003a6:	2209      	movs	r2, #9
 80003a8:	496f      	ldr	r1, [pc, #444]	@ (8000568 <HAL_UART_RxCpltCallback+0x294>)
 80003aa:	486d      	ldr	r0, [pc, #436]	@ (8000560 <HAL_UART_RxCpltCallback+0x28c>)
 80003ac:	f003 f8ca 	bl	8003544 <HAL_UART_Transmit_IT>
      }
    break;
 80003b0:	e115      	b.n	80005de <HAL_UART_RxCpltCallback+0x30a>
 80003b2:	e114      	b.n	80005de <HAL_UART_RxCpltCallback+0x30a>


    case 4:
      if(Rx_buffer[0] == 0x00 && Rx_buffer[1] == 0xFF && Rx_buffer[2] == 0x00){
 80003b4:	4b68      	ldr	r3, [pc, #416]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 8112 	bne.w	80005e2 <HAL_UART_RxCpltCallback+0x30e>
 80003be:	4b66      	ldr	r3, [pc, #408]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 80003c0:	785b      	ldrb	r3, [r3, #1]
 80003c2:	2bff      	cmp	r3, #255	@ 0xff
 80003c4:	f040 810d 	bne.w	80005e2 <HAL_UART_RxCpltCallback+0x30e>
 80003c8:	4b63      	ldr	r3, [pc, #396]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 80003ca:	789b      	ldrb	r3, [r3, #2]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	f040 8108 	bne.w	80005e2 <HAL_UART_RxCpltCallback+0x30e>

	digital_gpio = (Rx_buffer[3] & 0xF0) | (digital_gpio & 0x0F);
 80003d2:	4b61      	ldr	r3, [pc, #388]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 80003d4:	78db      	ldrb	r3, [r3, #3]
 80003d6:	b25b      	sxtb	r3, r3
 80003d8:	f023 030f 	bic.w	r3, r3, #15
 80003dc:	b25a      	sxtb	r2, r3
 80003de:	4b5f      	ldr	r3, [pc, #380]	@ (800055c <HAL_UART_RxCpltCallback+0x288>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	b25b      	sxtb	r3, r3
 80003e4:	f003 030f 	and.w	r3, r3, #15
 80003e8:	b25b      	sxtb	r3, r3
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b25b      	sxtb	r3, r3
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4b5a      	ldr	r3, [pc, #360]	@ (800055c <HAL_UART_RxCpltCallback+0x288>)
 80003f2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; ++i)
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	e016      	b.n	8000428 <HAL_UART_RxCpltCallback+0x154>
	  HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin << i, (digital_gpio >> (4 + i)) & 1);
 80003fa:	2240      	movs	r2, #64	@ 0x40
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000402:	b299      	uxth	r1, r3
 8000404:	4b55      	ldr	r3, [pc, #340]	@ (800055c <HAL_UART_RxCpltCallback+0x288>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	461a      	mov	r2, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	3304      	adds	r3, #4
 800040e:	fa42 f303 	asr.w	r3, r2, r3
 8000412:	b2db      	uxtb	r3, r3
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	b2db      	uxtb	r3, r3
 800041a:	461a      	mov	r2, r3
 800041c:	4853      	ldr	r0, [pc, #332]	@ (800056c <HAL_UART_RxCpltCallback+0x298>)
 800041e:	f002 fa72 	bl	8002906 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; ++i)
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	3301      	adds	r3, #1
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	2b03      	cmp	r3, #3
 800042c:	dde5      	ble.n	80003fa <HAL_UART_RxCpltCallback+0x126>
	saveBuffer();
 800042e:	f7ff ff11 	bl	8000254 <saveBuffer>
	HAL_UART_Transmit_IT(&huart3, combinedBuffer, 9);
 8000432:	2209      	movs	r2, #9
 8000434:	494c      	ldr	r1, [pc, #304]	@ (8000568 <HAL_UART_RxCpltCallback+0x294>)
 8000436:	484a      	ldr	r0, [pc, #296]	@ (8000560 <HAL_UART_RxCpltCallback+0x28c>)
 8000438:	f003 f884 	bl	8003544 <HAL_UART_Transmit_IT>
      }

    break;
 800043c:	e0d1      	b.n	80005e2 <HAL_UART_RxCpltCallback+0x30e>


    case 5:
      if(Rx_buffer[0] == 0x00 && Rx_buffer[1] == 0xFF && Rx_buffer[2] == 0xFF){
 800043e:	4b46      	ldr	r3, [pc, #280]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	f040 80cf 	bne.w	80005e6 <HAL_UART_RxCpltCallback+0x312>
 8000448:	4b43      	ldr	r3, [pc, #268]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800044a:	785b      	ldrb	r3, [r3, #1]
 800044c:	2bff      	cmp	r3, #255	@ 0xff
 800044e:	f040 80ca 	bne.w	80005e6 <HAL_UART_RxCpltCallback+0x312>
 8000452:	4b41      	ldr	r3, [pc, #260]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000454:	789b      	ldrb	r3, [r3, #2]
 8000456:	2bff      	cmp	r3, #255	@ 0xff
 8000458:	f040 80c5 	bne.w	80005e6 <HAL_UART_RxCpltCallback+0x312>
	if(isPowerOfTwo(Rx_buffer[3]) && Rx_buffer[3] <= 8){
 800045c:	4b3e      	ldr	r3, [pc, #248]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800045e:	78db      	ldrb	r3, [r3, #3]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fedf 	bl	8000224 <isPowerOfTwo>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d023      	beq.n	80004b4 <HAL_UART_RxCpltCallback+0x1e0>
 800046c:	4b3a      	ldr	r3, [pc, #232]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800046e:	78db      	ldrb	r3, [r3, #3]
 8000470:	2b08      	cmp	r3, #8
 8000472:	d81f      	bhi.n	80004b4 <HAL_UART_RxCpltCallback+0x1e0>
	  if(Rx_buffer[4] == 0xFF)
 8000474:	4b38      	ldr	r3, [pc, #224]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000476:	791b      	ldrb	r3, [r3, #4]
 8000478:	2bff      	cmp	r3, #255	@ 0xff
 800047a:	d10c      	bne.n	8000496 <HAL_UART_RxCpltCallback+0x1c2>
	    digital_gpio = digital_gpio | (Rx_buffer[3]<<4);
 800047c:	4b36      	ldr	r3, [pc, #216]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800047e:	78db      	ldrb	r3, [r3, #3]
 8000480:	011b      	lsls	r3, r3, #4
 8000482:	b25a      	sxtb	r2, r3
 8000484:	4b35      	ldr	r3, [pc, #212]	@ (800055c <HAL_UART_RxCpltCallback+0x288>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	b25b      	sxtb	r3, r3
 800048a:	4313      	orrs	r3, r2
 800048c:	b25b      	sxtb	r3, r3
 800048e:	b2da      	uxtb	r2, r3
 8000490:	4b32      	ldr	r3, [pc, #200]	@ (800055c <HAL_UART_RxCpltCallback+0x288>)
 8000492:	701a      	strb	r2, [r3, #0]
 8000494:	e00e      	b.n	80004b4 <HAL_UART_RxCpltCallback+0x1e0>
	  else
	    digital_gpio = digital_gpio & ~(Rx_buffer[3]<<4);
 8000496:	4b30      	ldr	r3, [pc, #192]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000498:	78db      	ldrb	r3, [r3, #3]
 800049a:	011b      	lsls	r3, r3, #4
 800049c:	b2db      	uxtb	r3, r3
 800049e:	43db      	mvns	r3, r3
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	b25a      	sxtb	r2, r3
 80004a4:	4b2d      	ldr	r3, [pc, #180]	@ (800055c <HAL_UART_RxCpltCallback+0x288>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	4013      	ands	r3, r2
 80004ac:	b25b      	sxtb	r3, r3
 80004ae:	b2da      	uxtb	r2, r3
 80004b0:	4b2a      	ldr	r3, [pc, #168]	@ (800055c <HAL_UART_RxCpltCallback+0x288>)
 80004b2:	701a      	strb	r2, [r3, #0]
	}
	for(int i = 0; i < 4; ++i)
 80004b4:	2300      	movs	r3, #0
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	e016      	b.n	80004e8 <HAL_UART_RxCpltCallback+0x214>
	    HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin << i, (digital_gpio >> (4 + i)) & 1);
 80004ba:	2240      	movs	r2, #64	@ 0x40
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	fa02 f303 	lsl.w	r3, r2, r3
 80004c2:	b299      	uxth	r1, r3
 80004c4:	4b25      	ldr	r3, [pc, #148]	@ (800055c <HAL_UART_RxCpltCallback+0x288>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	461a      	mov	r2, r3
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	3304      	adds	r3, #4
 80004ce:	fa42 f303 	asr.w	r3, r2, r3
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	f003 0301 	and.w	r3, r3, #1
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	4823      	ldr	r0, [pc, #140]	@ (800056c <HAL_UART_RxCpltCallback+0x298>)
 80004de:	f002 fa12 	bl	8002906 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; ++i)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	dde5      	ble.n	80004ba <HAL_UART_RxCpltCallback+0x1e6>
	saveBuffer();
 80004ee:	f7ff feb1 	bl	8000254 <saveBuffer>
	byte_count = 0;
 80004f2:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <HAL_UART_RxCpltCallback+0x27c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, combinedBuffer, 9);
 80004f8:	2209      	movs	r2, #9
 80004fa:	491b      	ldr	r1, [pc, #108]	@ (8000568 <HAL_UART_RxCpltCallback+0x294>)
 80004fc:	4818      	ldr	r0, [pc, #96]	@ (8000560 <HAL_UART_RxCpltCallback+0x28c>)
 80004fe:	f003 f821 	bl	8003544 <HAL_UART_Transmit_IT>
      }
    break;
 8000502:	e070      	b.n	80005e6 <HAL_UART_RxCpltCallback+0x312>


    case 6:
      //ANALOG
      if(Rx_buffer[0] == 0xFF && Rx_buffer[1] == 0xFF && Rx_buffer[2] == 0xFF){
 8000504:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2bff      	cmp	r3, #255	@ 0xff
 800050a:	d16e      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x316>
 800050c:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800050e:	785b      	ldrb	r3, [r3, #1]
 8000510:	2bff      	cmp	r3, #255	@ 0xff
 8000512:	d16a      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x316>
 8000514:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000516:	789b      	ldrb	r3, [r3, #2]
 8000518:	2bff      	cmp	r3, #255	@ 0xff
 800051a:	d166      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x316>
	  if(Rx_buffer[3] == 0x04){
 800051c:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800051e:	78db      	ldrb	r3, [r3, #3]
 8000520:	2b04      	cmp	r3, #4
 8000522:	d129      	bne.n	8000578 <HAL_UART_RxCpltCallback+0x2a4>
	      buffer[2] = ((uint16_t)Rx_buffer[4] << 8) | (uint16_t)Rx_buffer[5];
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	021b      	lsls	r3, r3, #8
 800052a:	b21a      	sxth	r2, r3
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <HAL_UART_RxCpltCallback+0x284>)
 800052e:	795b      	ldrb	r3, [r3, #5]
 8000530:	b21b      	sxth	r3, r3
 8000532:	4313      	orrs	r3, r2
 8000534:	b21a      	sxth	r2, r3
 8000536:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <HAL_UART_RxCpltCallback+0x29c>)
 8000538:	809a      	strh	r2, [r3, #4]

	      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)buffer[2]);
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <HAL_UART_RxCpltCallback+0x29c>)
 800053c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000540:	2200      	movs	r2, #0
 8000542:	2100      	movs	r1, #0
 8000544:	480b      	ldr	r0, [pc, #44]	@ (8000574 <HAL_UART_RxCpltCallback+0x2a0>)
 8000546:	f001 fb2e 	bl	8001ba6 <HAL_DAC_SetValue>
 800054a:	e02c      	b.n	80005a6 <HAL_UART_RxCpltCallback+0x2d2>
 800054c:	20000124 	.word	0x20000124
 8000550:	20000123 	.word	0x20000123
 8000554:	20000122 	.word	0x20000122
 8000558:	20000118 	.word	0x20000118
 800055c:	20000115 	.word	0x20000115
 8000560:	200000b0 	.word	0x200000b0
 8000564:	20000104 	.word	0x20000104
 8000568:	2000010c 	.word	0x2000010c
 800056c:	40011000 	.word	0x40011000
 8000570:	200000fc 	.word	0x200000fc
 8000574:	2000009c 	.word	0x2000009c
	  }
	  else if(Rx_buffer[3] == 0x06){
 8000578:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <HAL_UART_RxCpltCallback+0x32c>)
 800057a:	78db      	ldrb	r3, [r3, #3]
 800057c:	2b06      	cmp	r3, #6
 800057e:	d112      	bne.n	80005a6 <HAL_UART_RxCpltCallback+0x2d2>
	      buffer[3] = ((uint16_t)Rx_buffer[4] << 8) | (uint16_t)Rx_buffer[5];
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <HAL_UART_RxCpltCallback+0x32c>)
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	021b      	lsls	r3, r3, #8
 8000586:	b21a      	sxth	r2, r3
 8000588:	4b1d      	ldr	r3, [pc, #116]	@ (8000600 <HAL_UART_RxCpltCallback+0x32c>)
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	b21b      	sxth	r3, r3
 800058e:	4313      	orrs	r3, r2
 8000590:	b21a      	sxth	r2, r3
 8000592:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <HAL_UART_RxCpltCallback+0x330>)
 8000594:	80da      	strh	r2, [r3, #6]

	      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (uint32_t)buffer[3]);
 8000596:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <HAL_UART_RxCpltCallback+0x330>)
 8000598:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800059c:	2200      	movs	r2, #0
 800059e:	2110      	movs	r1, #16
 80005a0:	4819      	ldr	r0, [pc, #100]	@ (8000608 <HAL_UART_RxCpltCallback+0x334>)
 80005a2:	f001 fb00 	bl	8001ba6 <HAL_DAC_SetValue>
	  }
	  saveBuffer();
 80005a6:	f7ff fe55 	bl	8000254 <saveBuffer>
	  byte_count = 0;
 80005aa:	4b18      	ldr	r3, [pc, #96]	@ (800060c <HAL_UART_RxCpltCallback+0x338>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit_IT(&huart3, (uint8_t *) combinedBuffer, 9);
 80005b0:	2209      	movs	r2, #9
 80005b2:	4917      	ldr	r1, [pc, #92]	@ (8000610 <HAL_UART_RxCpltCallback+0x33c>)
 80005b4:	4817      	ldr	r0, [pc, #92]	@ (8000614 <HAL_UART_RxCpltCallback+0x340>)
 80005b6:	f002 ffc5 	bl	8003544 <HAL_UART_Transmit_IT>
      }
    break;
 80005ba:	e016      	b.n	80005ea <HAL_UART_RxCpltCallback+0x316>

    case 7:
      byte_count = 0;
 80005bc:	4b13      	ldr	r3, [pc, #76]	@ (800060c <HAL_UART_RxCpltCallback+0x338>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
      Rx_buffer[byte_count++] = Rx_byte;
 80005c2:	4b12      	ldr	r3, [pc, #72]	@ (800060c <HAL_UART_RxCpltCallback+0x338>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	b2d1      	uxtb	r1, r2
 80005ca:	4a10      	ldr	r2, [pc, #64]	@ (800060c <HAL_UART_RxCpltCallback+0x338>)
 80005cc:	7011      	strb	r1, [r2, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_UART_RxCpltCallback+0x344>)
 80005d2:	7819      	ldrb	r1, [r3, #0]
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <HAL_UART_RxCpltCallback+0x32c>)
 80005d6:	5499      	strb	r1, [r3, r2]
    break;
 80005d8:	e008      	b.n	80005ec <HAL_UART_RxCpltCallback+0x318>


    default:

    break;
 80005da:	bf00      	nop
 80005dc:	e006      	b.n	80005ec <HAL_UART_RxCpltCallback+0x318>
    break;
 80005de:	bf00      	nop
 80005e0:	e004      	b.n	80005ec <HAL_UART_RxCpltCallback+0x318>
    break;
 80005e2:	bf00      	nop
 80005e4:	e002      	b.n	80005ec <HAL_UART_RxCpltCallback+0x318>
    break;
 80005e6:	bf00      	nop
 80005e8:	e000      	b.n	80005ec <HAL_UART_RxCpltCallback+0x318>
    break;
 80005ea:	bf00      	nop
  }

  HAL_UART_Receive_IT(&huart3, &Rx_byte, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	490a      	ldr	r1, [pc, #40]	@ (8000618 <HAL_UART_RxCpltCallback+0x344>)
 80005f0:	4808      	ldr	r0, [pc, #32]	@ (8000614 <HAL_UART_RxCpltCallback+0x340>)
 80005f2:	f002 ffdc 	bl	80035ae <HAL_UART_Receive_IT>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000118 	.word	0x20000118
 8000604:	200000fc 	.word	0x200000fc
 8000608:	2000009c 	.word	0x2000009c
 800060c:	20000123 	.word	0x20000123
 8000610:	2000010c 	.word	0x2000010c
 8000614:	200000b0 	.word	0x200000b0
 8000618:	20000122 	.word	0x20000122

0800061c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  if(HAL_GetTick() - timestamp > 10)
 8000624:	f000 fca4 	bl	8000f70 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_UART_TxCpltCallback+0x28>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	2b0a      	cmp	r3, #10
 8000632:	d902      	bls.n	800063a <HAL_UART_TxCpltCallback+0x1e>
    byte_count = 0;
 8000634:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <HAL_UART_TxCpltCallback+0x2c>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000124 	.word	0x20000124
 8000648:	20000123 	.word	0x20000123

0800064c <get_pos>:

int get_pos(uint16_t pin){
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
  int pos = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  while(pin > 1){
 800065a:	e005      	b.n	8000668 <get_pos+0x1c>
      pin >>= 1;
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	085b      	lsrs	r3, r3, #1
 8000660:	80fb      	strh	r3, [r7, #6]
      pos++;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3301      	adds	r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
  while(pin > 1){
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d8f6      	bhi.n	800065c <get_pos+0x10>
  }
  return pos - 9;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	3b09      	subs	r3, #9
}
 8000672:	4618      	mov	r0, r3
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	80fb      	strh	r3, [r7, #6]
  int pos = get_pos(GPIO_Pin);
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffdf 	bl	800064c <get_pos>
 800068e:	60f8      	str	r0, [r7, #12]
  if(!HAL_GPIO_ReadPin(INPUT_GPIO_Port, GPIO_Pin)){
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	4619      	mov	r1, r3
 8000694:	4816      	ldr	r0, [pc, #88]	@ (80006f0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000696:	f002 f91f 	bl	80028d8 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10d      	bne.n	80006bc <HAL_GPIO_EXTI_Callback+0x40>
      digital_gpio = digital_gpio | (1 << (pos) );
 80006a0:	2201      	movs	r2, #1
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	b25a      	sxtb	r2, r3
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HAL_GPIO_EXTI_Callback+0x78>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <HAL_GPIO_EXTI_Callback+0x78>)
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e00e      	b.n	80006da <HAL_GPIO_EXTI_Callback+0x5e>
  }
  else{
      digital_gpio = digital_gpio & ~(1 << (pos));
 80006bc:	2201      	movs	r2, #1
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	43db      	mvns	r3, r3
 80006c8:	b25a      	sxtb	r2, r3
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <HAL_GPIO_EXTI_Callback+0x78>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	4013      	ands	r3, r2
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <HAL_GPIO_EXTI_Callback+0x78>)
 80006d8:	701a      	strb	r2, [r3, #0]
  }
  saveBuffer();
 80006da:	f7ff fdbb 	bl	8000254 <saveBuffer>
  HAL_UART_Transmit_IT(&huart3, combinedBuffer, 9);
 80006de:	2209      	movs	r2, #9
 80006e0:	4905      	ldr	r1, [pc, #20]	@ (80006f8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <HAL_GPIO_EXTI_Callback+0x80>)
 80006e4:	f002 ff2e 	bl	8003544 <HAL_UART_Transmit_IT>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40010800 	.word	0x40010800
 80006f4:	20000115 	.word	0x20000115
 80006f8:	2000010c 	.word	0x2000010c
 80006fc:	200000b0 	.word	0x200000b0

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000706:	f000 fbdb 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070a:	f000 f889 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f000 f9ab 	bl	8000a68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000712:	f000 f98b 	bl	8000a2c <MX_DMA_Init>
  MX_ADC1_Init();
 8000716:	f000 f8db 	bl	80008d0 <MX_ADC1_Init>
  MX_DAC_Init();
 800071a:	f000 f927 	bl	800096c <MX_DAC_Init>
  MX_USART3_UART_Init();
 800071e:	f000 f959 	bl	80009d4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000722:	4836      	ldr	r0, [pc, #216]	@ (80007fc <main+0xfc>)
 8000724:	f001 f80c 	bl	8001740 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_values, 2);
 8000728:	2202      	movs	r2, #2
 800072a:	4935      	ldr	r1, [pc, #212]	@ (8000800 <main+0x100>)
 800072c:	4833      	ldr	r0, [pc, #204]	@ (80007fc <main+0xfc>)
 800072e:	f000 fd13 	bl	8001158 <HAL_ADC_Start_DMA>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000732:	2100      	movs	r1, #0
 8000734:	4833      	ldr	r0, [pc, #204]	@ (8000804 <main+0x104>)
 8000736:	f001 f9e0 	bl	8001afa <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800073a:	2110      	movs	r1, #16
 800073c:	4831      	ldr	r0, [pc, #196]	@ (8000804 <main+0x104>)
 800073e:	f001 f9dc 	bl	8001afa <HAL_DAC_Start>

  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000742:	2300      	movs	r3, #0
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	482e      	ldr	r0, [pc, #184]	@ (8000804 <main+0x104>)
 800074a:	f001 fa2c 	bl	8001ba6 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 800074e:	2300      	movs	r3, #0
 8000750:	2200      	movs	r2, #0
 8000752:	2110      	movs	r1, #16
 8000754:	482b      	ldr	r0, [pc, #172]	@ (8000804 <main+0x104>)
 8000756:	f001 fa26 	bl	8001ba6 <HAL_DAC_SetValue>

  HAL_UART_Receive_IT(&huart3, &Rx_byte, 1);
 800075a:	2201      	movs	r2, #1
 800075c:	492a      	ldr	r1, [pc, #168]	@ (8000808 <main+0x108>)
 800075e:	482b      	ldr	r0, [pc, #172]	@ (800080c <main+0x10c>)
 8000760:	f002 ff25 	bl	80035ae <HAL_UART_Receive_IT>
  for(int i = 0; i < 4; ++i)
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	e02c      	b.n	80007c4 <main+0xc4>
    if(!HAL_GPIO_ReadPin(INPUT_GPIO_Port, INPUT_Pin << i)){
 800076a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	fa02 f303 	lsl.w	r3, r2, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	4619      	mov	r1, r3
 8000778:	4825      	ldr	r0, [pc, #148]	@ (8000810 <main+0x110>)
 800077a:	f002 f8ad 	bl	80028d8 <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d10d      	bne.n	80007a0 <main+0xa0>
	  digital_gpio = digital_gpio | (1 << (i) );
 8000784:	2201      	movs	r2, #1
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	fa02 f303 	lsl.w	r3, r2, r3
 800078c:	b25a      	sxtb	r2, r3
 800078e:	4b21      	ldr	r3, [pc, #132]	@ (8000814 <main+0x114>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b25b      	sxtb	r3, r3
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <main+0x114>)
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e00e      	b.n	80007be <main+0xbe>
    }
    else{
	digital_gpio = digital_gpio & ~(1 << (i));
 80007a0:	2201      	movs	r2, #1
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	43db      	mvns	r3, r3
 80007ac:	b25a      	sxtb	r2, r3
 80007ae:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <main+0x114>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	4013      	ands	r3, r2
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <main+0x114>)
 80007bc:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 4; ++i)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3301      	adds	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	ddcf      	ble.n	800076a <main+0x6a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      saveBuffer();
 80007ca:	f7ff fd43 	bl	8000254 <saveBuffer>
      HAL_UART_Transmit_IT(&huart3, combinedBuffer, 9);
 80007ce:	2209      	movs	r2, #9
 80007d0:	4911      	ldr	r1, [pc, #68]	@ (8000818 <main+0x118>)
 80007d2:	480e      	ldr	r0, [pc, #56]	@ (800080c <main+0x10c>)
 80007d4:	f002 feb6 	bl	8003544 <HAL_UART_Transmit_IT>
      interval_timestamp = HAL_GetTick();
 80007d8:	f000 fbca 	bl	8000f70 <HAL_GetTick>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a0f      	ldr	r2, [pc, #60]	@ (800081c <main+0x11c>)
 80007e0:	6013      	str	r3, [r2, #0]
      while(HAL_GetTick() - interval_timestamp < INTERVAL_MS);
 80007e2:	bf00      	nop
 80007e4:	f000 fbc4 	bl	8000f70 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <main+0x11c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d9f5      	bls.n	80007e4 <main+0xe4>
      saveBuffer();
 80007f8:	e7e7      	b.n	80007ca <main+0xca>
 80007fa:	bf00      	nop
 80007fc:	20000028 	.word	0x20000028
 8000800:	200000f8 	.word	0x200000f8
 8000804:	2000009c 	.word	0x2000009c
 8000808:	20000122 	.word	0x20000122
 800080c:	200000b0 	.word	0x200000b0
 8000810:	40010800 	.word	0x40010800
 8000814:	20000115 	.word	0x20000115
 8000818:	2000010c 	.word	0x2000010c
 800081c:	20000128 	.word	0x20000128

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b096      	sub	sp, #88	@ 0x58
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800082a:	2228      	movs	r2, #40	@ 0x28
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fbea 	bl	8004008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
 8000852:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2310      	movs	r3, #16
 800085e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000864:	2300      	movs	r3, #0
 8000866:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000868:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800086c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000872:	4618      	mov	r0, r3
 8000874:	f002 f878 	bl	8002968 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800087e:	f000 f96b 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2101      	movs	r1, #1
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fae5 	bl	8002e6c <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008a8:	f000 f956 	bl	8000b58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008ac:	2302      	movs	r3, #2
 80008ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80008b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fc65 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80008c4:	f000 f948 	bl	8000b58 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3758      	adds	r7, #88	@ 0x58
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008e0:	4b20      	ldr	r3, [pc, #128]	@ (8000964 <MX_ADC1_Init+0x94>)
 80008e2:	4a21      	ldr	r2, [pc, #132]	@ (8000968 <MX_ADC1_Init+0x98>)
 80008e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <MX_ADC1_Init+0x94>)
 80008e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <MX_ADC1_Init+0x94>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_ADC1_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_ADC1_Init+0x94>)
 80008fc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000900:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_ADC1_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_ADC1_Init+0x94>)
 800090a:	2202      	movs	r2, #2
 800090c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090e:	4815      	ldr	r0, [pc, #84]	@ (8000964 <MX_ADC1_Init+0x94>)
 8000910:	f000 fb38 	bl	8000f84 <HAL_ADC_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800091a:	f000 f91d 	bl	8000b58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800091e:	2301      	movs	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000922:	2301      	movs	r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000926:	2307      	movs	r3, #7
 8000928:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	@ (8000964 <MX_ADC1_Init+0x94>)
 8000930:	f000 fd0c 	bl	800134c <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 f90d 	bl	8000b58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800093e:	2302      	movs	r3, #2
 8000940:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000942:	2302      	movs	r3, #2
 8000944:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	@ (8000964 <MX_ADC1_Init+0x94>)
 800094c:	f000 fcfe 	bl	800134c <HAL_ADC_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000956:	f000 f8ff 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000028 	.word	0x20000028
 8000968:	40012400 	.word	0x40012400

0800096c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_DAC_Init+0x60>)
 800097c:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <MX_DAC_Init+0x64>)
 800097e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000980:	4812      	ldr	r0, [pc, #72]	@ (80009cc <MX_DAC_Init+0x60>)
 8000982:	f001 f898 	bl	8001ab6 <HAL_DAC_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800098c:	f000 f8e4 	bl	8000b58 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000990:	2300      	movs	r3, #0
 8000992:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	480b      	ldr	r0, [pc, #44]	@ (80009cc <MX_DAC_Init+0x60>)
 80009a0:	f001 f92a 	bl	8001bf8 <HAL_DAC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009aa:	f000 f8d5 	bl	8000b58 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	2210      	movs	r2, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_DAC_Init+0x60>)
 80009b6:	f001 f91f 	bl	8001bf8 <HAL_DAC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f8ca 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000009c 	.word	0x2000009c
 80009d0:	40007400 	.word	0x40007400

080009d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_USART3_UART_Init+0x50>)
 80009da:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <MX_USART3_UART_Init+0x54>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_USART3_UART_Init+0x50>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_USART3_UART_Init+0x50>)
 80009e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009ec:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <MX_USART3_UART_Init+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <MX_USART3_UART_Init+0x50>)
 80009f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_USART3_UART_Init+0x50>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <MX_USART3_UART_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_USART3_UART_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_USART3_UART_Init+0x50>)
 8000a10:	f002 fd48 	bl	80034a4 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
 8000a1a:	f000 f89d 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000b0 	.word	0x200000b0
 8000a28:	40004800 	.word	0x40004800

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_DMA_Init+0x38>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <MX_DMA_Init+0x38>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6153      	str	r3, [r2, #20]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_DMA_Init+0x38>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	200b      	movs	r0, #11
 8000a50:	f000 fffb 	bl	8001a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a54:	200b      	movs	r0, #11
 8000a56:	f001 f814 	bl	8001a82 <HAL_NVIC_EnableIRQ>

}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7c:	4b32      	ldr	r3, [pc, #200]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a31      	ldr	r2, [pc, #196]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000a82:	f043 0320 	orr.w	r3, r3, #32
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0320 	and.w	r3, r3, #32
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a2b      	ldr	r2, [pc, #172]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a25      	ldr	r2, [pc, #148]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <MX_GPIO_Init+0xe0>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0310 	and.w	r3, r3, #16
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUTPUT_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000ae2:	481a      	ldr	r0, [pc, #104]	@ (8000b4c <MX_GPIO_Init+0xe4>)
 8000ae4:	f001 ff0f 	bl	8002906 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUTPUT_Pin PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = OUTPUT_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000ae8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	4619      	mov	r1, r3
 8000b00:	4812      	ldr	r0, [pc, #72]	@ (8000b4c <MX_GPIO_Init+0xe4>)
 8000b02:	f001 fd55 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_Pin PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = INPUT_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b06:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_GPIO_Init+0xe8>)
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <MX_GPIO_Init+0xec>)
 8000b1c:	f001 fd48 	bl	80025b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2017      	movs	r0, #23
 8000b26:	f000 ff90 	bl	8001a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b2a:	2017      	movs	r0, #23
 8000b2c:	f000 ffa9 	bl	8001a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2028      	movs	r0, #40	@ 0x28
 8000b36:	f000 ff88 	bl	8001a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b3a:	2028      	movs	r0, #40	@ 0x28
 8000b3c:	f000 ffa1 	bl	8001a82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	10310000 	.word	0x10310000
 8000b54:	40010800 	.word	0x40010800

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a14      	ldr	r2, [pc, #80]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8c:	61d3      	str	r3, [r2, #28]
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <HAL_MspInit+0x60>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <HAL_MspInit+0x60>)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a28      	ldr	r2, [pc, #160]	@ (8000c84 <HAL_ADC_MspInit+0xbc>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d149      	bne.n	8000c7c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be8:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <HAL_ADC_MspInit+0xc0>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a26      	ldr	r2, [pc, #152]	@ (8000c88 <HAL_ADC_MspInit+0xc0>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <HAL_ADC_MspInit+0xc0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <HAL_ADC_MspInit+0xc0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a20      	ldr	r2, [pc, #128]	@ (8000c88 <HAL_ADC_MspInit+0xc0>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c88 <HAL_ADC_MspInit+0xc0>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000c18:	2306      	movs	r3, #6
 8000c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4619      	mov	r1, r3
 8000c26:	4819      	ldr	r0, [pc, #100]	@ (8000c8c <HAL_ADC_MspInit+0xc4>)
 8000c28:	f001 fcc2 	bl	80025b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <HAL_ADC_MspInit+0xc8>)
 8000c2e:	4a19      	ldr	r2, [pc, #100]	@ (8000c94 <HAL_ADC_MspInit+0xcc>)
 8000c30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <HAL_ADC_MspInit+0xc8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_ADC_MspInit+0xc8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <HAL_ADC_MspInit+0xc8>)
 8000c40:	2280      	movs	r2, #128	@ 0x80
 8000c42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_ADC_MspInit+0xc8>)
 8000c46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <HAL_ADC_MspInit+0xc8>)
 8000c4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <HAL_ADC_MspInit+0xc8>)
 8000c56:	2220      	movs	r2, #32
 8000c58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <HAL_ADC_MspInit+0xc8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c60:	480b      	ldr	r0, [pc, #44]	@ (8000c90 <HAL_ADC_MspInit+0xc8>)
 8000c62:	f001 f821 	bl	8001ca8 <HAL_DMA_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000c6c:	f7ff ff74 	bl	8000b58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_ADC_MspInit+0xc8>)
 8000c74:	621a      	str	r2, [r3, #32]
 8000c76:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <HAL_ADC_MspInit+0xc8>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40012400 	.word	0x40012400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	20000058 	.word	0x20000058
 8000c94:	40020008 	.word	0x40020008

08000c98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <HAL_DAC_MspInit+0x6c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d121      	bne.n	8000cfc <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <HAL_DAC_MspInit+0x70>)
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <HAL_DAC_MspInit+0x70>)
 8000cbe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000cc2:	61d3      	str	r3, [r2, #28]
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <HAL_DAC_MspInit+0x70>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <HAL_DAC_MspInit+0x70>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <HAL_DAC_MspInit+0x70>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_DAC_MspInit+0x70>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ce8:	2330      	movs	r3, #48	@ 0x30
 8000cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cec:	2303      	movs	r3, #3
 8000cee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <HAL_DAC_MspInit+0x74>)
 8000cf8:	f001 fc5a 	bl	80025b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40007400 	.word	0x40007400
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a20      	ldr	r2, [pc, #128]	@ (8000dac <HAL_UART_MspInit+0x9c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d139      	bne.n	8000da4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d30:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	4a1e      	ldr	r2, [pc, #120]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d3a:	61d3      	str	r3, [r2, #28]
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a18      	ldr	r2, [pc, #96]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	480f      	ldr	r0, [pc, #60]	@ (8000db4 <HAL_UART_MspInit+0xa4>)
 8000d76:	f001 fc1b 	bl	80025b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4809      	ldr	r0, [pc, #36]	@ (8000db4 <HAL_UART_MspInit+0xa4>)
 8000d90:	f001 fc0e 	bl	80025b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	2027      	movs	r0, #39	@ 0x27
 8000d9a:	f000 fe56 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d9e:	2027      	movs	r0, #39	@ 0x27
 8000da0:	f000 fe6f 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40004800 	.word	0x40004800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <NMI_Handler+0x4>

08000dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <MemManage_Handler+0x4>

08000dd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <UsageFault_Handler+0x4>

08000de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f8a0 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <DMA1_Channel1_IRQHandler+0x10>)
 8000e16:	f001 f961 	bl	80020dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000058 	.word	0x20000058

08000e24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT_Pin);
 8000e28:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e2c:	f001 fd84 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <USART3_IRQHandler+0x10>)
 8000e3a:	f002 fbdd 	bl	80035f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000b0 	.word	0x200000b0

08000e48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000e4c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e50:	f001 fd72 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000e54:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000e58:	f001 fd6e 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000e5c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000e60:	f001 fd6a 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff fff8 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e7a:	490c      	ldr	r1, [pc, #48]	@ (8000eac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a09      	ldr	r2, [pc, #36]	@ (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e90:	4c09      	ldr	r4, [pc, #36]	@ (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f003 f8bb 	bl	8004018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea2:	f7ff fc2d 	bl	8000700 <main>
  bx lr
 8000ea6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000eb0:	080040c0 	.word	0x080040c0
  ldr r2, =_sbss
 8000eb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000eb8:	20000130 	.word	0x20000130

08000ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_2_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x28>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x28>)
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 fdaf 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fe42 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40022000 	.word	0x40022000

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fdc7 	bl	8001a9e <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 fd8f 	bl	8001a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_IncTick+0x1c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a03      	ldr	r2, [pc, #12]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	2000012c 	.word	0x2000012c

08000f70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b02      	ldr	r3, [pc, #8]	@ (8000f80 <HAL_GetTick+0x10>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	2000012c 	.word	0x2000012c

08000f84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e0ce      	b.n	8001144 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d109      	bne.n	8000fc8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fe00 	bl	8000bc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 fb11 	bl	80015f0 <ADC_ConversionStop_Disable>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f040 80a9 	bne.w	8001132 <HAL_ADC_Init+0x1ae>
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f040 80a5 	bne.w	8001132 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ff0:	f023 0302 	bic.w	r3, r3, #2
 8000ff4:	f043 0202 	orr.w	r2, r3, #2
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4951      	ldr	r1, [pc, #324]	@ (800114c <HAL_ADC_Init+0x1c8>)
 8001006:	428b      	cmp	r3, r1
 8001008:	d10a      	bne.n	8001020 <HAL_ADC_Init+0x9c>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001012:	d002      	beq.n	800101a <HAL_ADC_Init+0x96>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	e004      	b.n	8001024 <HAL_ADC_Init+0xa0>
 800101a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800101e:	e001      	b.n	8001024 <HAL_ADC_Init+0xa0>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001024:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7b1b      	ldrb	r3, [r3, #12]
 800102a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800102c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	4313      	orrs	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800103c:	d003      	beq.n	8001046 <HAL_ADC_Init+0xc2>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d102      	bne.n	800104c <HAL_ADC_Init+0xc8>
 8001046:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800104a:	e000      	b.n	800104e <HAL_ADC_Init+0xca>
 800104c:	2300      	movs	r3, #0
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7d1b      	ldrb	r3, [r3, #20]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d119      	bne.n	8001090 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7b1b      	ldrb	r3, [r3, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d109      	bne.n	8001078 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	3b01      	subs	r3, #1
 800106a:	035a      	lsls	r2, r3, #13
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	e00b      	b.n	8001090 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107c:	f043 0220 	orr.w	r2, r3, #32
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001088:	f043 0201 	orr.w	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <HAL_ADC_Init+0x1cc>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	68b9      	ldr	r1, [r7, #8]
 80010b4:	430b      	orrs	r3, r1
 80010b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010c0:	d003      	beq.n	80010ca <HAL_ADC_Init+0x146>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d104      	bne.n	80010d4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	051b      	lsls	r3, r3, #20
 80010d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010da:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_ADC_Init+0x1d0>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d10b      	bne.n	8001110 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001102:	f023 0303 	bic.w	r3, r3, #3
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800110e:	e018      	b.n	8001142 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001114:	f023 0312 	bic.w	r3, r3, #18
 8001118:	f043 0210 	orr.w	r2, r3, #16
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001124:	f043 0201 	orr.w	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001130:	e007      	b.n	8001142 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001136:	f043 0210 	orr.w	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001142:	7dfb      	ldrb	r3, [r7, #23]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013c00 	.word	0x40013c00
 8001150:	ffe1f7fd 	.word	0xffe1f7fd
 8001154:	ff1f0efe 	.word	0xff1f0efe

08001158 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a64      	ldr	r2, [pc, #400]	@ (8001300 <HAL_ADC_Start_DMA+0x1a8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d004      	beq.n	800117c <HAL_ADC_Start_DMA+0x24>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a63      	ldr	r2, [pc, #396]	@ (8001304 <HAL_ADC_Start_DMA+0x1ac>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d106      	bne.n	800118a <HAL_ADC_Start_DMA+0x32>
 800117c:	4b60      	ldr	r3, [pc, #384]	@ (8001300 <HAL_ADC_Start_DMA+0x1a8>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f040 80b3 	bne.w	80012f0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_ADC_Start_DMA+0x40>
 8001194:	2302      	movs	r3, #2
 8001196:	e0ae      	b.n	80012f6 <HAL_ADC_Start_DMA+0x19e>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 f9cb 	bl	800153c <ADC_Enable>
 80011a6:	4603      	mov	r3, r0
 80011a8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f040 809a 	bne.w	80012e6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80011ba:	f023 0301 	bic.w	r3, r3, #1
 80011be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001304 <HAL_ADC_Start_DMA+0x1ac>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d105      	bne.n	80011dc <HAL_ADC_Start_DMA+0x84>
 80011d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001300 <HAL_ADC_Start_DMA+0x1a8>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d115      	bne.n	8001208 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d026      	beq.n	8001244 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001206:	e01d      	b.n	8001244 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a39      	ldr	r2, [pc, #228]	@ (8001300 <HAL_ADC_Start_DMA+0x1a8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d004      	beq.n	8001228 <HAL_ADC_Start_DMA+0xd0>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a38      	ldr	r2, [pc, #224]	@ (8001304 <HAL_ADC_Start_DMA+0x1ac>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d10d      	bne.n	8001244 <HAL_ADC_Start_DMA+0xec>
 8001228:	4b35      	ldr	r3, [pc, #212]	@ (8001300 <HAL_ADC_Start_DMA+0x1a8>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001238:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800123c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001254:	f023 0206 	bic.w	r2, r3, #6
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800125c:	e002      	b.n	8001264 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4a25      	ldr	r2, [pc, #148]	@ (8001308 <HAL_ADC_Start_DMA+0x1b0>)
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	4a24      	ldr	r2, [pc, #144]	@ (800130c <HAL_ADC_Start_DMA+0x1b4>)
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4a23      	ldr	r2, [pc, #140]	@ (8001310 <HAL_ADC_Start_DMA+0x1b8>)
 8001282:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f06f 0202 	mvn.w	r2, #2
 800128c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800129c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6a18      	ldr	r0, [r3, #32]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	334c      	adds	r3, #76	@ 0x4c
 80012a8:	4619      	mov	r1, r3
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f000 fd71 	bl	8001d94 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80012bc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80012c0:	d108      	bne.n	80012d4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80012d0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80012d2:	e00f      	b.n	80012f4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80012e2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80012e4:	e006      	b.n	80012f4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80012ee:	e001      	b.n	80012f4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40012400 	.word	0x40012400
 8001304:	40012800 	.word	0x40012800
 8001308:	08001673 	.word	0x08001673
 800130c:	080016ef 	.word	0x080016ef
 8001310:	0800170b 	.word	0x0800170b

08001314 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
	...

0800134c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_ADC_ConfigChannel+0x20>
 8001368:	2302      	movs	r3, #2
 800136a:	e0dc      	b.n	8001526 <HAL_ADC_ConfigChannel+0x1da>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b06      	cmp	r3, #6
 800137a:	d81c      	bhi.n	80013b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3b05      	subs	r3, #5
 800138e:	221f      	movs	r2, #31
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	4019      	ands	r1, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	3b05      	subs	r3, #5
 80013a8:	fa00 f203 	lsl.w	r2, r0, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80013b4:	e03c      	b.n	8001430 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b0c      	cmp	r3, #12
 80013bc:	d81c      	bhi.n	80013f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b23      	subs	r3, #35	@ 0x23
 80013d0:	221f      	movs	r2, #31
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4019      	ands	r1, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	3b23      	subs	r3, #35	@ 0x23
 80013ea:	fa00 f203 	lsl.w	r2, r0, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f6:	e01b      	b.n	8001430 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b41      	subs	r3, #65	@ 0x41
 800140a:	221f      	movs	r2, #31
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	4019      	ands	r1, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	3b41      	subs	r3, #65	@ 0x41
 8001424:	fa00 f203 	lsl.w	r2, r0, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b09      	cmp	r3, #9
 8001436:	d91c      	bls.n	8001472 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68d9      	ldr	r1, [r3, #12]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	3b1e      	subs	r3, #30
 800144a:	2207      	movs	r2, #7
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	4019      	ands	r1, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6898      	ldr	r0, [r3, #8]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	3b1e      	subs	r3, #30
 8001464:	fa00 f203 	lsl.w	r2, r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	e019      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6919      	ldr	r1, [r3, #16]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	2207      	movs	r2, #7
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	4019      	ands	r1, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	6898      	ldr	r0, [r3, #8]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d003      	beq.n	80014b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014b2:	2b11      	cmp	r3, #17
 80014b4:	d132      	bne.n	800151c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001530 <HAL_ADC_ConfigChannel+0x1e4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d125      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d126      	bne.n	800151c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80014dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d11a      	bne.n	800151c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_ADC_ConfigChannel+0x1e8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <HAL_ADC_ConfigChannel+0x1ec>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	0c9a      	lsrs	r2, r3, #18
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014fc:	e002      	b.n	8001504 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	3b01      	subs	r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f9      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x1b2>
 800150a:	e007      	b.n	800151c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001510:	f043 0220 	orr.w	r2, r3, #32
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40012400 	.word	0x40012400
 8001534:	20000000 	.word	0x20000000
 8001538:	431bde83 	.word	0x431bde83

0800153c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b01      	cmp	r3, #1
 8001558:	d040      	beq.n	80015dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0201 	orr.w	r2, r2, #1
 8001568:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800156a:	4b1f      	ldr	r3, [pc, #124]	@ (80015e8 <ADC_Enable+0xac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1f      	ldr	r2, [pc, #124]	@ (80015ec <ADC_Enable+0xb0>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	0c9b      	lsrs	r3, r3, #18
 8001576:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001578:	e002      	b.n	8001580 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3b01      	subs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001586:	f7ff fcf3 	bl	8000f70 <HAL_GetTick>
 800158a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800158c:	e01f      	b.n	80015ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800158e:	f7ff fcef 	bl	8000f70 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d918      	bls.n	80015ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d011      	beq.n	80015ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ae:	f043 0210 	orr.w	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ba:	f043 0201 	orr.w	r2, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e007      	b.n	80015de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d1d8      	bne.n	800158e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000000 	.word	0x20000000
 80015ec:	431bde83 	.word	0x431bde83

080015f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b01      	cmp	r3, #1
 8001608:	d12e      	bne.n	8001668 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800161a:	f7ff fca9 	bl	8000f70 <HAL_GetTick>
 800161e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001620:	e01b      	b.n	800165a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001622:	f7ff fca5 	bl	8000f70 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d914      	bls.n	800165a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b01      	cmp	r3, #1
 800163c:	d10d      	bne.n	800165a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001642:	f043 0210 	orr.w	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164e:	f043 0201 	orr.w	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e007      	b.n	800166a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	d0dc      	beq.n	8001622 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001684:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001688:	2b00      	cmp	r3, #0
 800168a:	d127      	bne.n	80016dc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001690:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016a6:	d115      	bne.n	80016d4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d111      	bne.n	80016d4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d105      	bne.n	80016d4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016cc:	f043 0201 	orr.w	r2, r3, #1
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f7ff fe1d 	bl	8001314 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80016da:	e004      	b.n	80016e6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	4798      	blx	r3
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff fe12 	bl	8001326 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001716:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001728:	f043 0204 	orr.w	r2, r3, #4
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7ff fe01 	bl	8001338 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_ADCEx_Calibration_Start+0x1e>
 800175a:	2302      	movs	r3, #2
 800175c:	e097      	b.n	800188e <HAL_ADCEx_Calibration_Start+0x14e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff42 	bl	80015f0 <ADC_ConversionStop_Disable>
 800176c:	4603      	mov	r3, r0
 800176e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fee3 	bl	800153c <ADC_Enable>
 8001776:	4603      	mov	r3, r0
 8001778:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f040 8081 	bne.w	8001884 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001786:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800178a:	f023 0302 	bic.w	r3, r3, #2
 800178e:	f043 0202 	orr.w	r2, r3, #2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001796:	4b40      	ldr	r3, [pc, #256]	@ (8001898 <HAL_ADCEx_Calibration_Start+0x158>)
 8001798:	681c      	ldr	r4, [r3, #0]
 800179a:	2002      	movs	r0, #2
 800179c:	f001 fdaa 	bl	80032f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80017a0:	4603      	mov	r3, r0
 80017a2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80017a6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80017a8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80017aa:	e002      	b.n	80017b2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f9      	bne.n	80017ac <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0208 	orr.w	r2, r2, #8
 80017c6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80017c8:	f7ff fbd2 	bl	8000f70 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017ce:	e01b      	b.n	8001808 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80017d0:	f7ff fbce 	bl	8000f70 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b0a      	cmp	r3, #10
 80017dc:	d914      	bls.n	8001808 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00d      	beq.n	8001808 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	f023 0312 	bic.w	r3, r3, #18
 80017f4:	f043 0210 	orr.w	r2, r3, #16
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e042      	b.n	800188e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1dc      	bne.n	80017d0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0204 	orr.w	r2, r2, #4
 8001824:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001826:	f7ff fba3 	bl	8000f70 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800182c:	e01b      	b.n	8001866 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800182e:	f7ff fb9f 	bl	8000f70 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b0a      	cmp	r3, #10
 800183a:	d914      	bls.n	8001866 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00d      	beq.n	8001866 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184e:	f023 0312 	bic.w	r3, r3, #18
 8001852:	f043 0210 	orr.w	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e013      	b.n	800188e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1dc      	bne.n	800182e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001878:	f023 0303 	bic.w	r3, r3, #3
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800188c:	7dfb      	ldrb	r3, [r7, #23]
}
 800188e:	4618      	mov	r0, r3
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd90      	pop	{r4, r7, pc}
 8001896:	bf00      	nop
 8001898:	20000000 	.word	0x20000000

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4906      	ldr	r1, [pc, #24]	@ (8001934 <__NVIC_EnableIRQ+0x34>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	@ (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	@ (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	@ 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	@ 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff90 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff2d 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5c:	f7ff ff42 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7ff ff90 	bl	800198c <NVIC_EncodePriority>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff5f 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff35 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffa2 	bl	80019f0 <SysTick_Config>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e014      	b.n	8001af2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	791b      	ldrb	r3, [r3, #4]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d105      	bne.n	8001ade <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff f8dd 	bl	8000c98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e046      	b.n	8001b9c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	795b      	ldrb	r3, [r3, #5]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_DAC_Start+0x20>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e040      	b.n	8001b9c <HAL_DAC_Start+0xa2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6819      	ldr	r1, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2201      	movs	r2, #1
 8001b34:	409a      	lsls	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10f      	bne.n	8001b64 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001b4e:	2b3c      	cmp	r3, #60	@ 0x3c
 8001b50:	d11d      	bne.n	8001b8e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	e014      	b.n	8001b8e <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	213c      	movs	r1, #60	@ 0x3c
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d107      	bne.n	8001b8e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0202 	orr.w	r2, r2, #2
 8001b8c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b087      	sub	sp, #28
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e015      	b.n	8001bee <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d105      	bne.n	8001bda <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e004      	b.n	8001be4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	3314      	adds	r3, #20
 8001be2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	461a      	mov	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <HAL_DAC_ConfigChannel+0x1c>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e042      	b.n	8001c9e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	795b      	ldrb	r3, [r3, #5]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_DAC_ConfigChannel+0x2c>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e03c      	b.n	8001c9e <HAL_DAC_ConfigChannel+0xa6>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6819      	ldr	r1, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	22c0      	movs	r2, #192	@ 0xc0
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e059      	b.n	8001d72 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <HAL_DMA_Init+0xd4>)
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d80f      	bhi.n	8001cea <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d80 <HAL_DMA_Init+0xd8>)
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001d84 <HAL_DMA_Init+0xdc>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	009a      	lsls	r2, r3, #2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a28      	ldr	r2, [pc, #160]	@ (8001d88 <HAL_DMA_Init+0xe0>)
 8001ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ce8:	e00e      	b.n	8001d08 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b26      	ldr	r3, [pc, #152]	@ (8001d8c <HAL_DMA_Init+0xe4>)
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a23      	ldr	r2, [pc, #140]	@ (8001d84 <HAL_DMA_Init+0xdc>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	009a      	lsls	r2, r3, #2
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a22      	ldr	r2, [pc, #136]	@ (8001d90 <HAL_DMA_Init+0xe8>)
 8001d06:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d1e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001d22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	40020407 	.word	0x40020407
 8001d80:	bffdfff8 	.word	0xbffdfff8
 8001d84:	cccccccd 	.word	0xcccccccd
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	bffdfbf8 	.word	0xbffdfbf8
 8001d90:	40020400 	.word	0x40020400

08001d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_DMA_Start_IT+0x20>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e04b      	b.n	8001e4c <HAL_DMA_Start_IT+0xb8>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d13a      	bne.n	8001e3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fbb1 	bl	8002554 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d008      	beq.n	8001e0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 020e 	orr.w	r2, r2, #14
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e00f      	b.n	8001e2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0204 	bic.w	r2, r2, #4
 8001e1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 020a 	orr.w	r2, r2, #10
 8001e2a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e005      	b.n	8001e4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e46:	2302      	movs	r3, #2
 8001e48:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d008      	beq.n	8001e7e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2204      	movs	r2, #4
 8001e70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e020      	b.n	8001ec0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 020e 	bic.w	r2, r2, #14
 8001e8c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d005      	beq.n	8001ef0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	e0d6      	b.n	800209e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 020e 	bic.w	r2, r2, #14
 8001efe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b64      	ldr	r3, [pc, #400]	@ (80020a8 <HAL_DMA_Abort_IT+0x1dc>)
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d958      	bls.n	8001fce <HAL_DMA_Abort_IT+0x102>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a62      	ldr	r2, [pc, #392]	@ (80020ac <HAL_DMA_Abort_IT+0x1e0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d04f      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0xfa>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a61      	ldr	r2, [pc, #388]	@ (80020b0 <HAL_DMA_Abort_IT+0x1e4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d048      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0xf6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a5f      	ldr	r2, [pc, #380]	@ (80020b4 <HAL_DMA_Abort_IT+0x1e8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d040      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xf0>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a5e      	ldr	r2, [pc, #376]	@ (80020b8 <HAL_DMA_Abort_IT+0x1ec>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d038      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0xea>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a5c      	ldr	r2, [pc, #368]	@ (80020bc <HAL_DMA_Abort_IT+0x1f0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d030      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xe4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a5b      	ldr	r2, [pc, #364]	@ (80020c0 <HAL_DMA_Abort_IT+0x1f4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d028      	beq.n	8001faa <HAL_DMA_Abort_IT+0xde>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	@ (80020a8 <HAL_DMA_Abort_IT+0x1dc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d020      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xd8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a57      	ldr	r2, [pc, #348]	@ (80020c4 <HAL_DMA_Abort_IT+0x1f8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d019      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0xd4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a55      	ldr	r2, [pc, #340]	@ (80020c8 <HAL_DMA_Abort_IT+0x1fc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d012      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xd0>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a54      	ldr	r2, [pc, #336]	@ (80020cc <HAL_DMA_Abort_IT+0x200>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00a      	beq.n	8001f96 <HAL_DMA_Abort_IT+0xca>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a52      	ldr	r2, [pc, #328]	@ (80020d0 <HAL_DMA_Abort_IT+0x204>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d102      	bne.n	8001f90 <HAL_DMA_Abort_IT+0xc4>
 8001f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f8e:	e01b      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xfc>
 8001f90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f94:	e018      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xfc>
 8001f96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f9a:	e015      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xfc>
 8001f9c:	2310      	movs	r3, #16
 8001f9e:	e013      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xfc>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e011      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xfc>
 8001fa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fa8:	e00e      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xfc>
 8001faa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fae:	e00b      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xfc>
 8001fb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fb4:	e008      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xfc>
 8001fb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fba:	e005      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xfc>
 8001fbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fc0:	e002      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xfc>
 8001fc2:	2310      	movs	r3, #16
 8001fc4:	e000      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xfc>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	4a42      	ldr	r2, [pc, #264]	@ (80020d4 <HAL_DMA_Abort_IT+0x208>)
 8001fca:	6053      	str	r3, [r2, #4]
 8001fcc:	e057      	b.n	800207e <HAL_DMA_Abort_IT+0x1b2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a36      	ldr	r2, [pc, #216]	@ (80020ac <HAL_DMA_Abort_IT+0x1e0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d04f      	beq.n	8002078 <HAL_DMA_Abort_IT+0x1ac>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a34      	ldr	r2, [pc, #208]	@ (80020b0 <HAL_DMA_Abort_IT+0x1e4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d048      	beq.n	8002074 <HAL_DMA_Abort_IT+0x1a8>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a33      	ldr	r2, [pc, #204]	@ (80020b4 <HAL_DMA_Abort_IT+0x1e8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d040      	beq.n	800206e <HAL_DMA_Abort_IT+0x1a2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a31      	ldr	r2, [pc, #196]	@ (80020b8 <HAL_DMA_Abort_IT+0x1ec>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d038      	beq.n	8002068 <HAL_DMA_Abort_IT+0x19c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a30      	ldr	r2, [pc, #192]	@ (80020bc <HAL_DMA_Abort_IT+0x1f0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d030      	beq.n	8002062 <HAL_DMA_Abort_IT+0x196>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a2e      	ldr	r2, [pc, #184]	@ (80020c0 <HAL_DMA_Abort_IT+0x1f4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d028      	beq.n	800205c <HAL_DMA_Abort_IT+0x190>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a26      	ldr	r2, [pc, #152]	@ (80020a8 <HAL_DMA_Abort_IT+0x1dc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d020      	beq.n	8002056 <HAL_DMA_Abort_IT+0x18a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2a      	ldr	r2, [pc, #168]	@ (80020c4 <HAL_DMA_Abort_IT+0x1f8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_DMA_Abort_IT+0x186>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a29      	ldr	r2, [pc, #164]	@ (80020c8 <HAL_DMA_Abort_IT+0x1fc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d012      	beq.n	800204e <HAL_DMA_Abort_IT+0x182>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a27      	ldr	r2, [pc, #156]	@ (80020cc <HAL_DMA_Abort_IT+0x200>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00a      	beq.n	8002048 <HAL_DMA_Abort_IT+0x17c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a26      	ldr	r2, [pc, #152]	@ (80020d0 <HAL_DMA_Abort_IT+0x204>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d102      	bne.n	8002042 <HAL_DMA_Abort_IT+0x176>
 800203c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002040:	e01b      	b.n	800207a <HAL_DMA_Abort_IT+0x1ae>
 8002042:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002046:	e018      	b.n	800207a <HAL_DMA_Abort_IT+0x1ae>
 8002048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800204c:	e015      	b.n	800207a <HAL_DMA_Abort_IT+0x1ae>
 800204e:	2310      	movs	r3, #16
 8002050:	e013      	b.n	800207a <HAL_DMA_Abort_IT+0x1ae>
 8002052:	2301      	movs	r3, #1
 8002054:	e011      	b.n	800207a <HAL_DMA_Abort_IT+0x1ae>
 8002056:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800205a:	e00e      	b.n	800207a <HAL_DMA_Abort_IT+0x1ae>
 800205c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002060:	e00b      	b.n	800207a <HAL_DMA_Abort_IT+0x1ae>
 8002062:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002066:	e008      	b.n	800207a <HAL_DMA_Abort_IT+0x1ae>
 8002068:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800206c:	e005      	b.n	800207a <HAL_DMA_Abort_IT+0x1ae>
 800206e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002072:	e002      	b.n	800207a <HAL_DMA_Abort_IT+0x1ae>
 8002074:	2310      	movs	r3, #16
 8002076:	e000      	b.n	800207a <HAL_DMA_Abort_IT+0x1ae>
 8002078:	2301      	movs	r3, #1
 800207a:	4a17      	ldr	r2, [pc, #92]	@ (80020d8 <HAL_DMA_Abort_IT+0x20c>)
 800207c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
    } 
  }
  return status;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40020080 	.word	0x40020080
 80020ac:	40020008 	.word	0x40020008
 80020b0:	4002001c 	.word	0x4002001c
 80020b4:	40020030 	.word	0x40020030
 80020b8:	40020044 	.word	0x40020044
 80020bc:	40020058 	.word	0x40020058
 80020c0:	4002006c 	.word	0x4002006c
 80020c4:	40020408 	.word	0x40020408
 80020c8:	4002041c 	.word	0x4002041c
 80020cc:	40020430 	.word	0x40020430
 80020d0:	40020444 	.word	0x40020444
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40020000 	.word	0x40020000

080020dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	2204      	movs	r2, #4
 80020fa:	409a      	lsls	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80f1 	beq.w	80022e8 <HAL_DMA_IRQHandler+0x20c>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80eb 	beq.w	80022e8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d107      	bne.n	8002130 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0204 	bic.w	r2, r2, #4
 800212e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b5f      	ldr	r3, [pc, #380]	@ (80022b4 <HAL_DMA_IRQHandler+0x1d8>)
 8002138:	429a      	cmp	r2, r3
 800213a:	d958      	bls.n	80021ee <HAL_DMA_IRQHandler+0x112>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a5d      	ldr	r2, [pc, #372]	@ (80022b8 <HAL_DMA_IRQHandler+0x1dc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d04f      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x10a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a5c      	ldr	r2, [pc, #368]	@ (80022bc <HAL_DMA_IRQHandler+0x1e0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d048      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x106>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a5a      	ldr	r2, [pc, #360]	@ (80022c0 <HAL_DMA_IRQHandler+0x1e4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d040      	beq.n	80021dc <HAL_DMA_IRQHandler+0x100>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a59      	ldr	r2, [pc, #356]	@ (80022c4 <HAL_DMA_IRQHandler+0x1e8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d038      	beq.n	80021d6 <HAL_DMA_IRQHandler+0xfa>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a57      	ldr	r2, [pc, #348]	@ (80022c8 <HAL_DMA_IRQHandler+0x1ec>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d030      	beq.n	80021d0 <HAL_DMA_IRQHandler+0xf4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a56      	ldr	r2, [pc, #344]	@ (80022cc <HAL_DMA_IRQHandler+0x1f0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d028      	beq.n	80021ca <HAL_DMA_IRQHandler+0xee>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a4d      	ldr	r2, [pc, #308]	@ (80022b4 <HAL_DMA_IRQHandler+0x1d8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d020      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xe8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <HAL_DMA_IRQHandler+0x1f4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d019      	beq.n	80021c0 <HAL_DMA_IRQHandler+0xe4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a50      	ldr	r2, [pc, #320]	@ (80022d4 <HAL_DMA_IRQHandler+0x1f8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d012      	beq.n	80021bc <HAL_DMA_IRQHandler+0xe0>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a4f      	ldr	r2, [pc, #316]	@ (80022d8 <HAL_DMA_IRQHandler+0x1fc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00a      	beq.n	80021b6 <HAL_DMA_IRQHandler+0xda>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a4d      	ldr	r2, [pc, #308]	@ (80022dc <HAL_DMA_IRQHandler+0x200>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d102      	bne.n	80021b0 <HAL_DMA_IRQHandler+0xd4>
 80021aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021ae:	e01b      	b.n	80021e8 <HAL_DMA_IRQHandler+0x10c>
 80021b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80021b4:	e018      	b.n	80021e8 <HAL_DMA_IRQHandler+0x10c>
 80021b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ba:	e015      	b.n	80021e8 <HAL_DMA_IRQHandler+0x10c>
 80021bc:	2340      	movs	r3, #64	@ 0x40
 80021be:	e013      	b.n	80021e8 <HAL_DMA_IRQHandler+0x10c>
 80021c0:	2304      	movs	r3, #4
 80021c2:	e011      	b.n	80021e8 <HAL_DMA_IRQHandler+0x10c>
 80021c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80021c8:	e00e      	b.n	80021e8 <HAL_DMA_IRQHandler+0x10c>
 80021ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021ce:	e00b      	b.n	80021e8 <HAL_DMA_IRQHandler+0x10c>
 80021d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80021d4:	e008      	b.n	80021e8 <HAL_DMA_IRQHandler+0x10c>
 80021d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021da:	e005      	b.n	80021e8 <HAL_DMA_IRQHandler+0x10c>
 80021dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e0:	e002      	b.n	80021e8 <HAL_DMA_IRQHandler+0x10c>
 80021e2:	2340      	movs	r3, #64	@ 0x40
 80021e4:	e000      	b.n	80021e8 <HAL_DMA_IRQHandler+0x10c>
 80021e6:	2304      	movs	r3, #4
 80021e8:	4a3d      	ldr	r2, [pc, #244]	@ (80022e0 <HAL_DMA_IRQHandler+0x204>)
 80021ea:	6053      	str	r3, [r2, #4]
 80021ec:	e057      	b.n	800229e <HAL_DMA_IRQHandler+0x1c2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a31      	ldr	r2, [pc, #196]	@ (80022b8 <HAL_DMA_IRQHandler+0x1dc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d04f      	beq.n	8002298 <HAL_DMA_IRQHandler+0x1bc>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2f      	ldr	r2, [pc, #188]	@ (80022bc <HAL_DMA_IRQHandler+0x1e0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d048      	beq.n	8002294 <HAL_DMA_IRQHandler+0x1b8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a2e      	ldr	r2, [pc, #184]	@ (80022c0 <HAL_DMA_IRQHandler+0x1e4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d040      	beq.n	800228e <HAL_DMA_IRQHandler+0x1b2>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a2c      	ldr	r2, [pc, #176]	@ (80022c4 <HAL_DMA_IRQHandler+0x1e8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d038      	beq.n	8002288 <HAL_DMA_IRQHandler+0x1ac>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a2b      	ldr	r2, [pc, #172]	@ (80022c8 <HAL_DMA_IRQHandler+0x1ec>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d030      	beq.n	8002282 <HAL_DMA_IRQHandler+0x1a6>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a29      	ldr	r2, [pc, #164]	@ (80022cc <HAL_DMA_IRQHandler+0x1f0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d028      	beq.n	800227c <HAL_DMA_IRQHandler+0x1a0>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a21      	ldr	r2, [pc, #132]	@ (80022b4 <HAL_DMA_IRQHandler+0x1d8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d020      	beq.n	8002276 <HAL_DMA_IRQHandler+0x19a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a25      	ldr	r2, [pc, #148]	@ (80022d0 <HAL_DMA_IRQHandler+0x1f4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d019      	beq.n	8002272 <HAL_DMA_IRQHandler+0x196>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a24      	ldr	r2, [pc, #144]	@ (80022d4 <HAL_DMA_IRQHandler+0x1f8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d012      	beq.n	800226e <HAL_DMA_IRQHandler+0x192>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a22      	ldr	r2, [pc, #136]	@ (80022d8 <HAL_DMA_IRQHandler+0x1fc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00a      	beq.n	8002268 <HAL_DMA_IRQHandler+0x18c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a21      	ldr	r2, [pc, #132]	@ (80022dc <HAL_DMA_IRQHandler+0x200>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d102      	bne.n	8002262 <HAL_DMA_IRQHandler+0x186>
 800225c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002260:	e01b      	b.n	800229a <HAL_DMA_IRQHandler+0x1be>
 8002262:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002266:	e018      	b.n	800229a <HAL_DMA_IRQHandler+0x1be>
 8002268:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800226c:	e015      	b.n	800229a <HAL_DMA_IRQHandler+0x1be>
 800226e:	2340      	movs	r3, #64	@ 0x40
 8002270:	e013      	b.n	800229a <HAL_DMA_IRQHandler+0x1be>
 8002272:	2304      	movs	r3, #4
 8002274:	e011      	b.n	800229a <HAL_DMA_IRQHandler+0x1be>
 8002276:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800227a:	e00e      	b.n	800229a <HAL_DMA_IRQHandler+0x1be>
 800227c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002280:	e00b      	b.n	800229a <HAL_DMA_IRQHandler+0x1be>
 8002282:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002286:	e008      	b.n	800229a <HAL_DMA_IRQHandler+0x1be>
 8002288:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800228c:	e005      	b.n	800229a <HAL_DMA_IRQHandler+0x1be>
 800228e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002292:	e002      	b.n	800229a <HAL_DMA_IRQHandler+0x1be>
 8002294:	2340      	movs	r3, #64	@ 0x40
 8002296:	e000      	b.n	800229a <HAL_DMA_IRQHandler+0x1be>
 8002298:	2304      	movs	r3, #4
 800229a:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <HAL_DMA_IRQHandler+0x208>)
 800229c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8136 	beq.w	8002514 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022b0:	e130      	b.n	8002514 <HAL_DMA_IRQHandler+0x438>
 80022b2:	bf00      	nop
 80022b4:	40020080 	.word	0x40020080
 80022b8:	40020008 	.word	0x40020008
 80022bc:	4002001c 	.word	0x4002001c
 80022c0:	40020030 	.word	0x40020030
 80022c4:	40020044 	.word	0x40020044
 80022c8:	40020058 	.word	0x40020058
 80022cc:	4002006c 	.word	0x4002006c
 80022d0:	40020408 	.word	0x40020408
 80022d4:	4002041c 	.word	0x4002041c
 80022d8:	40020430 	.word	0x40020430
 80022dc:	40020444 	.word	0x40020444
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	2202      	movs	r2, #2
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80dd 	beq.w	80024b4 <HAL_DMA_IRQHandler+0x3d8>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80d7 	beq.w	80024b4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 020a 	bic.w	r2, r2, #10
 8002322:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b7b      	ldr	r3, [pc, #492]	@ (8002520 <HAL_DMA_IRQHandler+0x444>)
 8002334:	429a      	cmp	r2, r3
 8002336:	d958      	bls.n	80023ea <HAL_DMA_IRQHandler+0x30e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a79      	ldr	r2, [pc, #484]	@ (8002524 <HAL_DMA_IRQHandler+0x448>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d04f      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x306>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a78      	ldr	r2, [pc, #480]	@ (8002528 <HAL_DMA_IRQHandler+0x44c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d048      	beq.n	80023de <HAL_DMA_IRQHandler+0x302>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a76      	ldr	r2, [pc, #472]	@ (800252c <HAL_DMA_IRQHandler+0x450>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d040      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x2fc>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a75      	ldr	r2, [pc, #468]	@ (8002530 <HAL_DMA_IRQHandler+0x454>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d038      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x2f6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a73      	ldr	r2, [pc, #460]	@ (8002534 <HAL_DMA_IRQHandler+0x458>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d030      	beq.n	80023cc <HAL_DMA_IRQHandler+0x2f0>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a72      	ldr	r2, [pc, #456]	@ (8002538 <HAL_DMA_IRQHandler+0x45c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d028      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x2ea>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a69      	ldr	r2, [pc, #420]	@ (8002520 <HAL_DMA_IRQHandler+0x444>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d020      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x2e4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6e      	ldr	r2, [pc, #440]	@ (800253c <HAL_DMA_IRQHandler+0x460>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d019      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2e0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6c      	ldr	r2, [pc, #432]	@ (8002540 <HAL_DMA_IRQHandler+0x464>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d012      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x2dc>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6b      	ldr	r2, [pc, #428]	@ (8002544 <HAL_DMA_IRQHandler+0x468>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00a      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2d6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a69      	ldr	r2, [pc, #420]	@ (8002548 <HAL_DMA_IRQHandler+0x46c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d102      	bne.n	80023ac <HAL_DMA_IRQHandler+0x2d0>
 80023a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023aa:	e01b      	b.n	80023e4 <HAL_DMA_IRQHandler+0x308>
 80023ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023b0:	e018      	b.n	80023e4 <HAL_DMA_IRQHandler+0x308>
 80023b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023b6:	e015      	b.n	80023e4 <HAL_DMA_IRQHandler+0x308>
 80023b8:	2320      	movs	r3, #32
 80023ba:	e013      	b.n	80023e4 <HAL_DMA_IRQHandler+0x308>
 80023bc:	2302      	movs	r3, #2
 80023be:	e011      	b.n	80023e4 <HAL_DMA_IRQHandler+0x308>
 80023c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023c4:	e00e      	b.n	80023e4 <HAL_DMA_IRQHandler+0x308>
 80023c6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80023ca:	e00b      	b.n	80023e4 <HAL_DMA_IRQHandler+0x308>
 80023cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023d0:	e008      	b.n	80023e4 <HAL_DMA_IRQHandler+0x308>
 80023d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023d6:	e005      	b.n	80023e4 <HAL_DMA_IRQHandler+0x308>
 80023d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023dc:	e002      	b.n	80023e4 <HAL_DMA_IRQHandler+0x308>
 80023de:	2320      	movs	r3, #32
 80023e0:	e000      	b.n	80023e4 <HAL_DMA_IRQHandler+0x308>
 80023e2:	2302      	movs	r3, #2
 80023e4:	4a59      	ldr	r2, [pc, #356]	@ (800254c <HAL_DMA_IRQHandler+0x470>)
 80023e6:	6053      	str	r3, [r2, #4]
 80023e8:	e057      	b.n	800249a <HAL_DMA_IRQHandler+0x3be>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002524 <HAL_DMA_IRQHandler+0x448>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d04f      	beq.n	8002494 <HAL_DMA_IRQHandler+0x3b8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002528 <HAL_DMA_IRQHandler+0x44c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d048      	beq.n	8002490 <HAL_DMA_IRQHandler+0x3b4>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a4a      	ldr	r2, [pc, #296]	@ (800252c <HAL_DMA_IRQHandler+0x450>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d040      	beq.n	800248a <HAL_DMA_IRQHandler+0x3ae>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a48      	ldr	r2, [pc, #288]	@ (8002530 <HAL_DMA_IRQHandler+0x454>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d038      	beq.n	8002484 <HAL_DMA_IRQHandler+0x3a8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a47      	ldr	r2, [pc, #284]	@ (8002534 <HAL_DMA_IRQHandler+0x458>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d030      	beq.n	800247e <HAL_DMA_IRQHandler+0x3a2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a45      	ldr	r2, [pc, #276]	@ (8002538 <HAL_DMA_IRQHandler+0x45c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d028      	beq.n	8002478 <HAL_DMA_IRQHandler+0x39c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a3d      	ldr	r2, [pc, #244]	@ (8002520 <HAL_DMA_IRQHandler+0x444>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d020      	beq.n	8002472 <HAL_DMA_IRQHandler+0x396>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a41      	ldr	r2, [pc, #260]	@ (800253c <HAL_DMA_IRQHandler+0x460>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d019      	beq.n	800246e <HAL_DMA_IRQHandler+0x392>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a40      	ldr	r2, [pc, #256]	@ (8002540 <HAL_DMA_IRQHandler+0x464>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d012      	beq.n	800246a <HAL_DMA_IRQHandler+0x38e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3e      	ldr	r2, [pc, #248]	@ (8002544 <HAL_DMA_IRQHandler+0x468>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00a      	beq.n	8002464 <HAL_DMA_IRQHandler+0x388>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a3d      	ldr	r2, [pc, #244]	@ (8002548 <HAL_DMA_IRQHandler+0x46c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d102      	bne.n	800245e <HAL_DMA_IRQHandler+0x382>
 8002458:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800245c:	e01b      	b.n	8002496 <HAL_DMA_IRQHandler+0x3ba>
 800245e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002462:	e018      	b.n	8002496 <HAL_DMA_IRQHandler+0x3ba>
 8002464:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002468:	e015      	b.n	8002496 <HAL_DMA_IRQHandler+0x3ba>
 800246a:	2320      	movs	r3, #32
 800246c:	e013      	b.n	8002496 <HAL_DMA_IRQHandler+0x3ba>
 800246e:	2302      	movs	r3, #2
 8002470:	e011      	b.n	8002496 <HAL_DMA_IRQHandler+0x3ba>
 8002472:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002476:	e00e      	b.n	8002496 <HAL_DMA_IRQHandler+0x3ba>
 8002478:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800247c:	e00b      	b.n	8002496 <HAL_DMA_IRQHandler+0x3ba>
 800247e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002482:	e008      	b.n	8002496 <HAL_DMA_IRQHandler+0x3ba>
 8002484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002488:	e005      	b.n	8002496 <HAL_DMA_IRQHandler+0x3ba>
 800248a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800248e:	e002      	b.n	8002496 <HAL_DMA_IRQHandler+0x3ba>
 8002490:	2320      	movs	r3, #32
 8002492:	e000      	b.n	8002496 <HAL_DMA_IRQHandler+0x3ba>
 8002494:	2302      	movs	r3, #2
 8002496:	4a2e      	ldr	r2, [pc, #184]	@ (8002550 <HAL_DMA_IRQHandler+0x474>)
 8002498:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d034      	beq.n	8002514 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024b2:	e02f      	b.n	8002514 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	2208      	movs	r2, #8
 80024ba:	409a      	lsls	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d028      	beq.n	8002516 <HAL_DMA_IRQHandler+0x43a>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d023      	beq.n	8002516 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 020e 	bic.w	r2, r2, #14
 80024dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
    }
  }
  return;
 8002514:	bf00      	nop
 8002516:	bf00      	nop
}
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40020080 	.word	0x40020080
 8002524:	40020008 	.word	0x40020008
 8002528:	4002001c 	.word	0x4002001c
 800252c:	40020030 	.word	0x40020030
 8002530:	40020044 	.word	0x40020044
 8002534:	40020058 	.word	0x40020058
 8002538:	4002006c 	.word	0x4002006c
 800253c:	40020408 	.word	0x40020408
 8002540:	4002041c 	.word	0x4002041c
 8002544:	40020430 	.word	0x40020430
 8002548:	40020444 	.word	0x40020444
 800254c:	40020400 	.word	0x40020400
 8002550:	40020000 	.word	0x40020000

08002554 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b10      	cmp	r3, #16
 8002580:	d108      	bne.n	8002594 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002592:	e007      	b.n	80025a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	60da      	str	r2, [r3, #12]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b08b      	sub	sp, #44	@ 0x2c
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c2:	e179      	b.n	80028b8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025c4:	2201      	movs	r2, #1
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	429a      	cmp	r2, r3
 80025de:	f040 8168 	bne.w	80028b2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a96      	ldr	r2, [pc, #600]	@ (8002840 <HAL_GPIO_Init+0x290>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d05e      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
 80025ec:	4a94      	ldr	r2, [pc, #592]	@ (8002840 <HAL_GPIO_Init+0x290>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d875      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 80025f2:	4a94      	ldr	r2, [pc, #592]	@ (8002844 <HAL_GPIO_Init+0x294>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d058      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
 80025f8:	4a92      	ldr	r2, [pc, #584]	@ (8002844 <HAL_GPIO_Init+0x294>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d86f      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 80025fe:	4a92      	ldr	r2, [pc, #584]	@ (8002848 <HAL_GPIO_Init+0x298>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d052      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
 8002604:	4a90      	ldr	r2, [pc, #576]	@ (8002848 <HAL_GPIO_Init+0x298>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d869      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 800260a:	4a90      	ldr	r2, [pc, #576]	@ (800284c <HAL_GPIO_Init+0x29c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d04c      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
 8002610:	4a8e      	ldr	r2, [pc, #568]	@ (800284c <HAL_GPIO_Init+0x29c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d863      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 8002616:	4a8e      	ldr	r2, [pc, #568]	@ (8002850 <HAL_GPIO_Init+0x2a0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d046      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
 800261c:	4a8c      	ldr	r2, [pc, #560]	@ (8002850 <HAL_GPIO_Init+0x2a0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d85d      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 8002622:	2b12      	cmp	r3, #18
 8002624:	d82a      	bhi.n	800267c <HAL_GPIO_Init+0xcc>
 8002626:	2b12      	cmp	r3, #18
 8002628:	d859      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 800262a:	a201      	add	r2, pc, #4	@ (adr r2, 8002630 <HAL_GPIO_Init+0x80>)
 800262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002630:	080026ab 	.word	0x080026ab
 8002634:	08002685 	.word	0x08002685
 8002638:	08002697 	.word	0x08002697
 800263c:	080026d9 	.word	0x080026d9
 8002640:	080026df 	.word	0x080026df
 8002644:	080026df 	.word	0x080026df
 8002648:	080026df 	.word	0x080026df
 800264c:	080026df 	.word	0x080026df
 8002650:	080026df 	.word	0x080026df
 8002654:	080026df 	.word	0x080026df
 8002658:	080026df 	.word	0x080026df
 800265c:	080026df 	.word	0x080026df
 8002660:	080026df 	.word	0x080026df
 8002664:	080026df 	.word	0x080026df
 8002668:	080026df 	.word	0x080026df
 800266c:	080026df 	.word	0x080026df
 8002670:	080026df 	.word	0x080026df
 8002674:	0800268d 	.word	0x0800268d
 8002678:	080026a1 	.word	0x080026a1
 800267c:	4a75      	ldr	r2, [pc, #468]	@ (8002854 <HAL_GPIO_Init+0x2a4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002682:	e02c      	b.n	80026de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	623b      	str	r3, [r7, #32]
          break;
 800268a:	e029      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	3304      	adds	r3, #4
 8002692:	623b      	str	r3, [r7, #32]
          break;
 8002694:	e024      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	3308      	adds	r3, #8
 800269c:	623b      	str	r3, [r7, #32]
          break;
 800269e:	e01f      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	330c      	adds	r3, #12
 80026a6:	623b      	str	r3, [r7, #32]
          break;
 80026a8:	e01a      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d102      	bne.n	80026b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026b2:	2304      	movs	r3, #4
 80026b4:	623b      	str	r3, [r7, #32]
          break;
 80026b6:	e013      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026c0:	2308      	movs	r3, #8
 80026c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	611a      	str	r2, [r3, #16]
          break;
 80026ca:	e009      	b.n	80026e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026cc:	2308      	movs	r3, #8
 80026ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	615a      	str	r2, [r3, #20]
          break;
 80026d6:	e003      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
          break;
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          break;
 80026de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2bff      	cmp	r3, #255	@ 0xff
 80026e4:	d801      	bhi.n	80026ea <HAL_GPIO_Init+0x13a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	e001      	b.n	80026ee <HAL_GPIO_Init+0x13e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2bff      	cmp	r3, #255	@ 0xff
 80026f4:	d802      	bhi.n	80026fc <HAL_GPIO_Init+0x14c>
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	e002      	b.n	8002702 <HAL_GPIO_Init+0x152>
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	3b08      	subs	r3, #8
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	210f      	movs	r1, #15
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	6a39      	ldr	r1, [r7, #32]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	431a      	orrs	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80c1 	beq.w	80028b2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002730:	4b49      	ldr	r3, [pc, #292]	@ (8002858 <HAL_GPIO_Init+0x2a8>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	4a48      	ldr	r2, [pc, #288]	@ (8002858 <HAL_GPIO_Init+0x2a8>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6193      	str	r3, [r2, #24]
 800273c:	4b46      	ldr	r3, [pc, #280]	@ (8002858 <HAL_GPIO_Init+0x2a8>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002748:	4a44      	ldr	r2, [pc, #272]	@ (800285c <HAL_GPIO_Init+0x2ac>)
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002754:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4013      	ands	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3c      	ldr	r2, [pc, #240]	@ (8002860 <HAL_GPIO_Init+0x2b0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d01f      	beq.n	80027b4 <HAL_GPIO_Init+0x204>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3b      	ldr	r2, [pc, #236]	@ (8002864 <HAL_GPIO_Init+0x2b4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d019      	beq.n	80027b0 <HAL_GPIO_Init+0x200>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a3a      	ldr	r2, [pc, #232]	@ (8002868 <HAL_GPIO_Init+0x2b8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d013      	beq.n	80027ac <HAL_GPIO_Init+0x1fc>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a39      	ldr	r2, [pc, #228]	@ (800286c <HAL_GPIO_Init+0x2bc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00d      	beq.n	80027a8 <HAL_GPIO_Init+0x1f8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a38      	ldr	r2, [pc, #224]	@ (8002870 <HAL_GPIO_Init+0x2c0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <HAL_GPIO_Init+0x1f4>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a37      	ldr	r2, [pc, #220]	@ (8002874 <HAL_GPIO_Init+0x2c4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_GPIO_Init+0x1f0>
 800279c:	2305      	movs	r3, #5
 800279e:	e00a      	b.n	80027b6 <HAL_GPIO_Init+0x206>
 80027a0:	2306      	movs	r3, #6
 80027a2:	e008      	b.n	80027b6 <HAL_GPIO_Init+0x206>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e006      	b.n	80027b6 <HAL_GPIO_Init+0x206>
 80027a8:	2303      	movs	r3, #3
 80027aa:	e004      	b.n	80027b6 <HAL_GPIO_Init+0x206>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e002      	b.n	80027b6 <HAL_GPIO_Init+0x206>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_GPIO_Init+0x206>
 80027b4:	2300      	movs	r3, #0
 80027b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b8:	f002 0203 	and.w	r2, r2, #3
 80027bc:	0092      	lsls	r2, r2, #2
 80027be:	4093      	lsls	r3, r2
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027c6:	4925      	ldr	r1, [pc, #148]	@ (800285c <HAL_GPIO_Init+0x2ac>)
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	3302      	adds	r3, #2
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027e0:	4b25      	ldr	r3, [pc, #148]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4924      	ldr	r1, [pc, #144]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027ee:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4920      	ldr	r1, [pc, #128]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	491a      	ldr	r1, [pc, #104]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	60cb      	str	r3, [r1, #12]
 8002814:	e006      	b.n	8002824 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002816:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	43db      	mvns	r3, r3
 800281e:	4916      	ldr	r1, [pc, #88]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 8002820:	4013      	ands	r3, r2
 8002822:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d025      	beq.n	800287c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	4910      	ldr	r1, [pc, #64]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
 800283c:	e025      	b.n	800288a <HAL_GPIO_Init+0x2da>
 800283e:	bf00      	nop
 8002840:	10320000 	.word	0x10320000
 8002844:	10310000 	.word	0x10310000
 8002848:	10220000 	.word	0x10220000
 800284c:	10210000 	.word	0x10210000
 8002850:	10120000 	.word	0x10120000
 8002854:	10110000 	.word	0x10110000
 8002858:	40021000 	.word	0x40021000
 800285c:	40010000 	.word	0x40010000
 8002860:	40010800 	.word	0x40010800
 8002864:	40010c00 	.word	0x40010c00
 8002868:	40011000 	.word	0x40011000
 800286c:	40011400 	.word	0x40011400
 8002870:	40011800 	.word	0x40011800
 8002874:	40011c00 	.word	0x40011c00
 8002878:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800287c:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <HAL_GPIO_Init+0x324>)
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	43db      	mvns	r3, r3
 8002884:	4913      	ldr	r1, [pc, #76]	@ (80028d4 <HAL_GPIO_Init+0x324>)
 8002886:	4013      	ands	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002896:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <HAL_GPIO_Init+0x324>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	490e      	ldr	r1, [pc, #56]	@ (80028d4 <HAL_GPIO_Init+0x324>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]
 80028a2:	e006      	b.n	80028b2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <HAL_GPIO_Init+0x324>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	4909      	ldr	r1, [pc, #36]	@ (80028d4 <HAL_GPIO_Init+0x324>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f47f ae7e 	bne.w	80025c4 <HAL_GPIO_Init+0x14>
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	372c      	adds	r7, #44	@ 0x2c
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40010400 	.word	0x40010400

080028d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	887b      	ldrh	r3, [r7, #2]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e001      	b.n	80028fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	807b      	strh	r3, [r7, #2]
 8002912:	4613      	mov	r3, r2
 8002914:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002916:	787b      	ldrb	r3, [r7, #1]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291c:	887a      	ldrh	r2, [r7, #2]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002922:	e003      	b.n	800292c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002924:	887b      	ldrh	r3, [r7, #2]
 8002926:	041a      	lsls	r2, r3, #16
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	611a      	str	r2, [r3, #16]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
	...

08002938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800294e:	4a05      	ldr	r2, [pc, #20]	@ (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fe90 	bl	800067c <HAL_GPIO_EXTI_Callback>
  }
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40010400 	.word	0x40010400

08002968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e272      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8087 	beq.w	8002a96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002988:	4b92      	ldr	r3, [pc, #584]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b04      	cmp	r3, #4
 8002992:	d00c      	beq.n	80029ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002994:	4b8f      	ldr	r3, [pc, #572]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d112      	bne.n	80029c6 <HAL_RCC_OscConfig+0x5e>
 80029a0:	4b8c      	ldr	r3, [pc, #560]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ac:	d10b      	bne.n	80029c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ae:	4b89      	ldr	r3, [pc, #548]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d06c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x12c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d168      	bne.n	8002a94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e24c      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x76>
 80029d0:	4b80      	ldr	r3, [pc, #512]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a7f      	ldr	r2, [pc, #508]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	e02e      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x98>
 80029e6:	4b7b      	ldr	r3, [pc, #492]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7a      	ldr	r2, [pc, #488]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b78      	ldr	r3, [pc, #480]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a77      	ldr	r2, [pc, #476]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e01d      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0xbc>
 8002a0a:	4b72      	ldr	r3, [pc, #456]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a71      	ldr	r2, [pc, #452]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 8002a24:	4b6b      	ldr	r3, [pc, #428]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b68      	ldr	r3, [pc, #416]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a67      	ldr	r2, [pc, #412]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fa94 	bl	8000f70 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fa90 	bl	8000f70 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	@ 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e200      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0xe4>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fa80 	bl	8000f70 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fe fa7c 	bl	8000f70 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	@ 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1ec      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	4b53      	ldr	r3, [pc, #332]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x10c>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d063      	beq.n	8002b6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aae:	4b49      	ldr	r3, [pc, #292]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d11c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x18c>
 8002aba:	4b46      	ldr	r3, [pc, #280]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	4b43      	ldr	r3, [pc, #268]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x176>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1c0      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4939      	ldr	r1, [pc, #228]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	e03a      	b.n	8002b6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afc:	4b36      	ldr	r3, [pc, #216]	@ (8002bd8 <HAL_RCC_OscConfig+0x270>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe fa35 	bl	8000f70 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fa31 	bl	8000f70 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1a1      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4927      	ldr	r1, [pc, #156]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3e:	4b26      	ldr	r3, [pc, #152]	@ (8002bd8 <HAL_RCC_OscConfig+0x270>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe fa14 	bl	8000f70 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fa10 	bl	8000f70 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e180      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03a      	beq.n	8002bec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d019      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b17      	ldr	r3, [pc, #92]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7fe f9f4 	bl	8000f70 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7fe f9f0 	bl	8000f70 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e160      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002baa:	2001      	movs	r0, #1
 8002bac:	f000 face 	bl	800314c <RCC_Delay>
 8002bb0:	e01c      	b.n	8002bec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb8:	f7fe f9da 	bl	8000f70 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbe:	e00f      	b.n	8002be0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7fe f9d6 	bl	8000f70 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d908      	bls.n	8002be0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e146      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	42420000 	.word	0x42420000
 8002bdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	4b92      	ldr	r3, [pc, #584]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e9      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a6 	beq.w	8002d46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfe:	4b8b      	ldr	r3, [pc, #556]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	4b88      	ldr	r3, [pc, #544]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a87      	ldr	r2, [pc, #540]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c14:	61d3      	str	r3, [r2, #28]
 8002c16:	4b85      	ldr	r3, [pc, #532]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b82      	ldr	r3, [pc, #520]	@ (8002e30 <HAL_RCC_OscConfig+0x4c8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d118      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c32:	4b7f      	ldr	r3, [pc, #508]	@ (8002e30 <HAL_RCC_OscConfig+0x4c8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7e      	ldr	r2, [pc, #504]	@ (8002e30 <HAL_RCC_OscConfig+0x4c8>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe f997 	bl	8000f70 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c46:	f7fe f993 	bl	8000f70 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b64      	cmp	r3, #100	@ 0x64
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e103      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4b75      	ldr	r3, [pc, #468]	@ (8002e30 <HAL_RCC_OscConfig+0x4c8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x312>
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a6e      	ldr	r2, [pc, #440]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	e02d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x334>
 8002c82:	4b6a      	ldr	r3, [pc, #424]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a69      	ldr	r2, [pc, #420]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b67      	ldr	r3, [pc, #412]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a66      	ldr	r2, [pc, #408]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6213      	str	r3, [r2, #32]
 8002c9a:	e01c      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x356>
 8002ca4:	4b61      	ldr	r3, [pc, #388]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4a60      	ldr	r2, [pc, #384]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6213      	str	r3, [r2, #32]
 8002cb0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a5d      	ldr	r2, [pc, #372]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	e00b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a5a      	ldr	r2, [pc, #360]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6213      	str	r3, [r2, #32]
 8002cca:	4b58      	ldr	r3, [pc, #352]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a57      	ldr	r2, [pc, #348]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	f023 0304 	bic.w	r3, r3, #4
 8002cd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d015      	beq.n	8002d0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fe f947 	bl	8000f70 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe f943 	bl	8000f70 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0b1      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ee      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x37e>
 8002d08:	e014      	b.n	8002d34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe f931 	bl	8000f70 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe f92d 	bl	8000f70 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e09b      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d28:	4b40      	ldr	r3, [pc, #256]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ee      	bne.n	8002d12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a3b      	ldr	r2, [pc, #236]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8087 	beq.w	8002e5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d50:	4b36      	ldr	r3, [pc, #216]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d061      	beq.n	8002e20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d146      	bne.n	8002df2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d64:	4b33      	ldr	r3, [pc, #204]	@ (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fe f901 	bl	8000f70 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d72:	f7fe f8fd 	bl	8000f70 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e06d      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d84:	4b29      	ldr	r3, [pc, #164]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d98:	d108      	bne.n	8002dac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d9a:	4b24      	ldr	r3, [pc, #144]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4921      	ldr	r1, [pc, #132]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dac:	4b1f      	ldr	r3, [pc, #124]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a19      	ldr	r1, [r3, #32]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	491b      	ldr	r1, [pc, #108]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe f8d1 	bl	8000f70 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fe f8cd 	bl	8000f70 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e03d      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x46a>
 8002df0:	e035      	b.n	8002e5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df2:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe f8ba 	bl	8000f70 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe f8b6 	bl	8000f70 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e026      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x498>
 8002e1e:	e01e      	b.n	8002e5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e019      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40007000 	.word	0x40007000
 8002e34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCC_OscConfig+0x500>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000

08002e6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0d0      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b6a      	ldr	r3, [pc, #424]	@ (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d910      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b67      	ldr	r3, [pc, #412]	@ (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0207 	bic.w	r2, r3, #7
 8002e96:	4965      	ldr	r1, [pc, #404]	@ (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b63      	ldr	r3, [pc, #396]	@ (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0b8      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d020      	beq.n	8002efe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec8:	4b59      	ldr	r3, [pc, #356]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a58      	ldr	r2, [pc, #352]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ed2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee0:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002eea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eec:	4b50      	ldr	r3, [pc, #320]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	494d      	ldr	r1, [pc, #308]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d040      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b47      	ldr	r3, [pc, #284]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d115      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e07f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2a:	4b41      	ldr	r3, [pc, #260]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e073      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e06b      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4a:	4b39      	ldr	r3, [pc, #228]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f023 0203 	bic.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4936      	ldr	r1, [pc, #216]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7fe f808 	bl	8000f70 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fe f804 	bl	8000f70 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e053      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 020c 	and.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d1eb      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b27      	ldr	r3, [pc, #156]	@ (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d210      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b24      	ldr	r3, [pc, #144]	@ (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 0207 	bic.w	r2, r3, #7
 8002fa2:	4922      	ldr	r1, [pc, #136]	@ (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b20      	ldr	r3, [pc, #128]	@ (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e032      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc8:	4b19      	ldr	r3, [pc, #100]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4916      	ldr	r1, [pc, #88]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fe6:	4b12      	ldr	r3, [pc, #72]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	490e      	ldr	r1, [pc, #56]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ffa:	f000 f821 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002ffe:	4602      	mov	r2, r0
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	490a      	ldr	r1, [pc, #40]	@ (8003034 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	5ccb      	ldrb	r3, [r1, r3]
 800300e:	fa22 f303 	lsr.w	r3, r2, r3
 8003012:	4a09      	ldr	r2, [pc, #36]	@ (8003038 <HAL_RCC_ClockConfig+0x1cc>)
 8003014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003016:	4b09      	ldr	r3, [pc, #36]	@ (800303c <HAL_RCC_ClockConfig+0x1d0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd ff66 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40022000 	.word	0x40022000
 8003030:	40021000 	.word	0x40021000
 8003034:	08004078 	.word	0x08004078
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800305a:	4b1e      	ldr	r3, [pc, #120]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b04      	cmp	r3, #4
 8003068:	d002      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x30>
 800306a:	2b08      	cmp	r3, #8
 800306c:	d003      	beq.n	8003076 <HAL_RCC_GetSysClockFreq+0x36>
 800306e:	e027      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003070:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003072:	613b      	str	r3, [r7, #16]
      break;
 8003074:	e027      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	0c9b      	lsrs	r3, r3, #18
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	4a17      	ldr	r2, [pc, #92]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003080:	5cd3      	ldrb	r3, [r2, r3]
 8003082:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d010      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800308e:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	0c5b      	lsrs	r3, r3, #17
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	4a11      	ldr	r2, [pc, #68]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a0d      	ldr	r2, [pc, #52]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030a2:	fb03 f202 	mul.w	r2, r3, r2
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	e004      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a0c      	ldr	r2, [pc, #48]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	613b      	str	r3, [r7, #16]
      break;
 80030be:	e002      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030c2:	613b      	str	r3, [r7, #16]
      break;
 80030c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c6:	693b      	ldr	r3, [r7, #16]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	007a1200 	.word	0x007a1200
 80030dc:	08004090 	.word	0x08004090
 80030e0:	080040a0 	.word	0x080040a0
 80030e4:	003d0900 	.word	0x003d0900

080030e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ec:	4b02      	ldr	r3, [pc, #8]	@ (80030f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	20000000 	.word	0x20000000

080030fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003100:	f7ff fff2 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	@ (8003120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	08004088 	.word	0x08004088

08003124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003128:	f7ff ffde 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	0adb      	lsrs	r3, r3, #11
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4903      	ldr	r1, [pc, #12]	@ (8003148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000
 8003148:	08004088 	.word	0x08004088

0800314c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003154:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <RCC_Delay+0x34>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0a      	ldr	r2, [pc, #40]	@ (8003184 <RCC_Delay+0x38>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	0a5b      	lsrs	r3, r3, #9
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003168:	bf00      	nop
  }
  while (Delay --);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1e5a      	subs	r2, r3, #1
 800316e:	60fa      	str	r2, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f9      	bne.n	8003168 <RCC_Delay+0x1c>
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	20000000 	.word	0x20000000
 8003184:	10624dd3 	.word	0x10624dd3

08003188 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d07d      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031a4:	2300      	movs	r3, #0
 80031a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a8:	4b4f      	ldr	r3, [pc, #316]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10d      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b4:	4b4c      	ldr	r3, [pc, #304]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	4a4b      	ldr	r2, [pc, #300]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031be:	61d3      	str	r3, [r2, #28]
 80031c0:	4b49      	ldr	r3, [pc, #292]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031cc:	2301      	movs	r3, #1
 80031ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	4b46      	ldr	r3, [pc, #280]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d118      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031dc:	4b43      	ldr	r3, [pc, #268]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a42      	ldr	r2, [pc, #264]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e8:	f7fd fec2 	bl	8000f70 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ee:	e008      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f0:	f7fd febe 	bl	8000f70 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	@ 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e06d      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003202:	4b3a      	ldr	r3, [pc, #232]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800320e:	4b36      	ldr	r3, [pc, #216]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003216:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d02e      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	429a      	cmp	r2, r3
 800322a:	d027      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800322c:	4b2e      	ldr	r3, [pc, #184]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003234:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003236:	4b2e      	ldr	r3, [pc, #184]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800323c:	4b2c      	ldr	r3, [pc, #176]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003242:	4a29      	ldr	r2, [pc, #164]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d014      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7fd fe8d 	bl	8000f70 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fd fe89 	bl	8000f70 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e036      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003270:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ee      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800327c:	4b1a      	ldr	r3, [pc, #104]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4917      	ldr	r1, [pc, #92]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	4313      	orrs	r3, r2
 800328c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800328e:	7dfb      	ldrb	r3, [r7, #23]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003294:	4b14      	ldr	r3, [pc, #80]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4a13      	ldr	r2, [pc, #76]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ac:	4b0e      	ldr	r3, [pc, #56]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	490b      	ldr	r1, [pc, #44]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ca:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	4904      	ldr	r1, [pc, #16]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40007000 	.word	0x40007000
 80032f0:	42420440 	.word	0x42420440

080032f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	2b0f      	cmp	r3, #15
 8003316:	f200 80af 	bhi.w	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800331a:	a201      	add	r2, pc, #4	@ (adr r2, 8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	080033f7 	.word	0x080033f7
 8003324:	0800345d 	.word	0x0800345d
 8003328:	08003479 	.word	0x08003479
 800332c:	080033e7 	.word	0x080033e7
 8003330:	08003479 	.word	0x08003479
 8003334:	08003479 	.word	0x08003479
 8003338:	08003479 	.word	0x08003479
 800333c:	080033ef 	.word	0x080033ef
 8003340:	08003479 	.word	0x08003479
 8003344:	08003479 	.word	0x08003479
 8003348:	08003479 	.word	0x08003479
 800334c:	08003479 	.word	0x08003479
 8003350:	08003479 	.word	0x08003479
 8003354:	08003479 	.word	0x08003479
 8003358:	08003479 	.word	0x08003479
 800335c:	08003361 	.word	0x08003361
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003360:	4b4a      	ldr	r3, [pc, #296]	@ (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003366:	4b49      	ldr	r3, [pc, #292]	@ (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8084 	beq.w	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	0c9b      	lsrs	r3, r3, #18
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	4a44      	ldr	r2, [pc, #272]	@ (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d015      	beq.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800338c:	4b3f      	ldr	r3, [pc, #252]	@ (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0c5b      	lsrs	r3, r3, #17
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	4a3f      	ldr	r2, [pc, #252]	@ (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8003398:	5cd3      	ldrb	r3, [r2, r3]
 800339a:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033a6:	4a3c      	ldr	r2, [pc, #240]	@ (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	fb02 f303 	mul.w	r3, r2, r3
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e004      	b.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4a38      	ldr	r2, [pc, #224]	@ (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80033bc:	fb02 f303 	mul.w	r3, r2, r3
 80033c0:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80033c2:	4b32      	ldr	r3, [pc, #200]	@ (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ce:	d102      	bne.n	80033d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80033d4:	e052      	b.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4a31      	ldr	r2, [pc, #196]	@ (80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	61bb      	str	r3, [r7, #24]
      break;
 80033e4:	e04a      	b.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80033e6:	f7ff fe2b 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 80033ea:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80033ec:	e049      	b.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80033ee:	f7ff fe27 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 80033f2:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80033f4:	e045      	b.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80033f6:	4b25      	ldr	r3, [pc, #148]	@ (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003406:	d108      	bne.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8003412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	e01f      	b.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003424:	d109      	bne.n	800343a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003426:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8003432:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	e00f      	b.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003444:	d11c      	bne.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003446:	4b11      	ldr	r3, [pc, #68]	@ (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d016      	beq.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8003452:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003456:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003458:	e012      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800345a:	e011      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800345c:	f7ff fe62 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b0a      	ldr	r3, [pc, #40]	@ (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	0b9b      	lsrs	r3, r3, #14
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	3301      	adds	r3, #1
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	61bb      	str	r3, [r7, #24]
      break;
 8003476:	e004      	b.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8003478:	bf00      	nop
 800347a:	e002      	b.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 800347c:	bf00      	nop
 800347e:	e000      	b.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003480:	bf00      	nop
    }
  }
  return (frequency);
 8003482:	69bb      	ldr	r3, [r7, #24]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	080040a4 	.word	0x080040a4
 8003494:	080040b4 	.word	0x080040b4
 8003498:	007a1200 	.word	0x007a1200
 800349c:	003d0900 	.word	0x003d0900
 80034a0:	aaaaaaab 	.word	0xaaaaaaab

080034a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e042      	b.n	800353c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fc20 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2224      	movs	r2, #36	@ 0x24
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fcff 	bl	8003eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800350c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800351c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b20      	cmp	r3, #32
 800355c:	d121      	bne.n	80035a2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_UART_Transmit_IT+0x26>
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e01a      	b.n	80035a4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	88fa      	ldrh	r2, [r7, #6]
 800357e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2221      	movs	r2, #33	@ 0x21
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800359c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
  }
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	4613      	mov	r3, r2
 80035ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d112      	bne.n	80035ee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_UART_Receive_IT+0x26>
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e00b      	b.n	80035f0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	461a      	mov	r2, r3
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 faad 	bl	8003b44 <UART_Start_Receive_IT>
 80035ea:	4603      	mov	r3, r0
 80035ec:	e000      	b.n	80035f0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b0ba      	sub	sp, #232	@ 0xe8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800361e:	2300      	movs	r3, #0
 8003620:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10f      	bne.n	800365e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_UART_IRQHandler+0x66>
 800364a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fb8a 	bl	8003d70 <UART_Receive_IT>
      return;
 800365c:	e25b      	b.n	8003b16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800365e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80de 	beq.w	8003824 <HAL_UART_IRQHandler+0x22c>
 8003668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003678:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80d1 	beq.w	8003824 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <HAL_UART_IRQHandler+0xae>
 800368e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	f043 0201 	orr.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_UART_IRQHandler+0xd2>
 80036b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_UART_IRQHandler+0xf6>
 80036d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e6:	f043 0204 	orr.w	r2, r3, #4
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d011      	beq.n	800371e <HAL_UART_IRQHandler+0x126>
 80036fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	f043 0208 	orr.w	r2, r3, #8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 81f2 	beq.w	8003b0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_UART_IRQHandler+0x14e>
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fb15 	bl	8003d70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <HAL_UART_IRQHandler+0x17a>
 800376a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d04f      	beq.n	8003812 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa1f 	bl	8003bb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d041      	beq.n	800380a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3314      	adds	r3, #20
 800378c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800379c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3314      	adds	r3, #20
 80037ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1d9      	bne.n	8003786 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d013      	beq.n	8003802 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	4a7e      	ldr	r2, [pc, #504]	@ (80039d8 <HAL_UART_IRQHandler+0x3e0>)
 80037e0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fb70 	bl	8001ecc <HAL_DMA_Abort_IT>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d016      	beq.n	8003820 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037fc:	4610      	mov	r0, r2
 80037fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	e00e      	b.n	8003820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f98a 	bl	8003b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	e00a      	b.n	8003820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f986 	bl	8003b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	e006      	b.n	8003820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f982 	bl	8003b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800381e:	e175      	b.n	8003b0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	bf00      	nop
    return;
 8003822:	e173      	b.n	8003b0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003828:	2b01      	cmp	r3, #1
 800382a:	f040 814f 	bne.w	8003acc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800382e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8148 	beq.w	8003acc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8141 	beq.w	8003acc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80b6 	beq.w	80039dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800387c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8145 	beq.w	8003b10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800388a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800388e:	429a      	cmp	r2, r3
 8003890:	f080 813e 	bcs.w	8003b10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800389a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	f000 8088 	beq.w	80039b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1d9      	bne.n	80038a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3314      	adds	r3, #20
 80038fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003904:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003918:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800391c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003920:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800392a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e1      	bne.n	80038f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3314      	adds	r3, #20
 8003936:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003954:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003956:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800395a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003962:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e3      	bne.n	8003930 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	330c      	adds	r3, #12
 800397c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003988:	f023 0310 	bic.w	r3, r3, #16
 800398c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800399a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800399c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e3      	bne.n	8003976 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe fa4e 	bl	8001e54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8ad 	bl	8003b2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039d4:	e09c      	b.n	8003b10 <HAL_UART_IRQHandler+0x518>
 80039d6:	bf00      	nop
 80039d8:	08003c7b 	.word	0x08003c7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 808e 	beq.w	8003b14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8089 	beq.w	8003b14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	330c      	adds	r3, #12
 8003a22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a26:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e3      	bne.n	8003a02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3314      	adds	r3, #20
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	623b      	str	r3, [r7, #32]
   return(result);
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3314      	adds	r3, #20
 8003a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e3      	bne.n	8003a3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0310 	bic.w	r3, r3, #16
 8003a96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003aa4:	61fa      	str	r2, [r7, #28]
 8003aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	69b9      	ldr	r1, [r7, #24]
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e3      	bne.n	8003a80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003abe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f832 	bl	8003b2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aca:	e023      	b.n	8003b14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <HAL_UART_IRQHandler+0x4f4>
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f8dc 	bl	8003ca2 <UART_Transmit_IT>
    return;
 8003aea:	e014      	b.n	8003b16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00e      	beq.n	8003b16 <HAL_UART_IRQHandler+0x51e>
 8003af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f91b 	bl	8003d40 <UART_EndTransmit_IT>
    return;
 8003b0a:	e004      	b.n	8003b16 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b0c:	bf00      	nop
 8003b0e:	e002      	b.n	8003b16 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b10:	bf00      	nop
 8003b12:	e000      	b.n	8003b16 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b14:	bf00      	nop
  }
}
 8003b16:	37e8      	adds	r7, #232	@ 0xe8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2222      	movs	r2, #34	@ 0x22
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0220 	orr.w	r2, r2, #32
 8003ba8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b095      	sub	sp, #84	@ 0x54
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bde:	643a      	str	r2, [r7, #64]	@ 0x40
 8003be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003be4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e5      	bne.n	8003bbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e5      	bne.n	8003bf2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d119      	bne.n	8003c62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	330c      	adds	r3, #12
 8003c34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f023 0310 	bic.w	r3, r3, #16
 8003c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c4e:	61ba      	str	r2, [r7, #24]
 8003c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6979      	ldr	r1, [r7, #20]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e5      	bne.n	8003c2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c70:	bf00      	nop
 8003c72:	3754      	adds	r7, #84	@ 0x54
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff ff41 	bl	8003b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b21      	cmp	r3, #33	@ 0x21
 8003cb4:	d13e      	bne.n	8003d34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbe:	d114      	bne.n	8003cea <UART_Transmit_IT+0x48>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d110      	bne.n	8003cea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cdc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	1c9a      	adds	r2, r3, #2
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]
 8003ce8:	e008      	b.n	8003cfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	1c59      	adds	r1, r3, #1
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6211      	str	r1, [r2, #32]
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10f      	bne.n	8003d30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fc fc5b 	bl	800061c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08c      	sub	sp, #48	@ 0x30
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b22      	cmp	r3, #34	@ 0x22
 8003d82:	f040 80ae 	bne.w	8003ee2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8e:	d117      	bne.n	8003dc0 <UART_Receive_IT+0x50>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d113      	bne.n	8003dc0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	1c9a      	adds	r2, r3, #2
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dbe:	e026      	b.n	8003e0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd2:	d007      	beq.n	8003de4 <UART_Receive_IT+0x74>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <UART_Receive_IT+0x82>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	e008      	b.n	8003e04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d15d      	bne.n	8003ede <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0220 	bic.w	r2, r2, #32
 8003e30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d135      	bne.n	8003ed4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f023 0310 	bic.w	r3, r3, #16
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8e:	623a      	str	r2, [r7, #32]
 8003e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	69f9      	ldr	r1, [r7, #28]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e5      	bne.n	8003e6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d10a      	bne.n	8003ec6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fe2e 	bl	8003b2e <HAL_UARTEx_RxEventCallback>
 8003ed2:	e002      	b.n	8003eda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7fc f9fd 	bl	80002d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e002      	b.n	8003ee4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e000      	b.n	8003ee4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
  }
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3730      	adds	r7, #48	@ 0x30
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f26:	f023 030c 	bic.w	r3, r3, #12
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004000 <UART_SetConfig+0x114>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d103      	bne.n	8003f5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f54:	f7ff f8e6 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	e002      	b.n	8003f62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7ff f8ce 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8003f60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009a      	lsls	r2, r3, #2
 8003f6c:	441a      	add	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	4a22      	ldr	r2, [pc, #136]	@ (8004004 <UART_SetConfig+0x118>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	0119      	lsls	r1, r3, #4
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009a      	lsls	r2, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f98:	4b1a      	ldr	r3, [pc, #104]	@ (8004004 <UART_SetConfig+0x118>)
 8003f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	2064      	movs	r0, #100	@ 0x64
 8003fa2:	fb00 f303 	mul.w	r3, r0, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	3332      	adds	r3, #50	@ 0x32
 8003fac:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <UART_SetConfig+0x118>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fb8:	4419      	add	r1, r3
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009a      	lsls	r2, r3, #2
 8003fc4:	441a      	add	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <UART_SetConfig+0x118>)
 8003fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2064      	movs	r0, #100	@ 0x64
 8003fda:	fb00 f303 	mul.w	r3, r0, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	3332      	adds	r3, #50	@ 0x32
 8003fe4:	4a07      	ldr	r2, [pc, #28]	@ (8004004 <UART_SetConfig+0x118>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	f003 020f 	and.w	r2, r3, #15
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40013800 	.word	0x40013800
 8004004:	51eb851f 	.word	0x51eb851f

08004008 <memset>:
 8004008:	4603      	mov	r3, r0
 800400a:	4402      	add	r2, r0
 800400c:	4293      	cmp	r3, r2
 800400e:	d100      	bne.n	8004012 <memset+0xa>
 8004010:	4770      	bx	lr
 8004012:	f803 1b01 	strb.w	r1, [r3], #1
 8004016:	e7f9      	b.n	800400c <memset+0x4>

08004018 <__libc_init_array>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	2600      	movs	r6, #0
 800401c:	4d0c      	ldr	r5, [pc, #48]	@ (8004050 <__libc_init_array+0x38>)
 800401e:	4c0d      	ldr	r4, [pc, #52]	@ (8004054 <__libc_init_array+0x3c>)
 8004020:	1b64      	subs	r4, r4, r5
 8004022:	10a4      	asrs	r4, r4, #2
 8004024:	42a6      	cmp	r6, r4
 8004026:	d109      	bne.n	800403c <__libc_init_array+0x24>
 8004028:	f000 f81a 	bl	8004060 <_init>
 800402c:	2600      	movs	r6, #0
 800402e:	4d0a      	ldr	r5, [pc, #40]	@ (8004058 <__libc_init_array+0x40>)
 8004030:	4c0a      	ldr	r4, [pc, #40]	@ (800405c <__libc_init_array+0x44>)
 8004032:	1b64      	subs	r4, r4, r5
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	42a6      	cmp	r6, r4
 8004038:	d105      	bne.n	8004046 <__libc_init_array+0x2e>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004040:	4798      	blx	r3
 8004042:	3601      	adds	r6, #1
 8004044:	e7ee      	b.n	8004024 <__libc_init_array+0xc>
 8004046:	f855 3b04 	ldr.w	r3, [r5], #4
 800404a:	4798      	blx	r3
 800404c:	3601      	adds	r6, #1
 800404e:	e7f2      	b.n	8004036 <__libc_init_array+0x1e>
 8004050:	080040b8 	.word	0x080040b8
 8004054:	080040b8 	.word	0x080040b8
 8004058:	080040b8 	.word	0x080040b8
 800405c:	080040bc 	.word	0x080040bc

08004060 <_init>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	bf00      	nop
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr

0800406c <_fini>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	bf00      	nop
 8004070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004072:	bc08      	pop	{r3}
 8004074:	469e      	mov	lr, r3
 8004076:	4770      	bx	lr
